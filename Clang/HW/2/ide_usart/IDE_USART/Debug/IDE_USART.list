
IDE_USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f64  080001e0  080001e0  000101e0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003144  08003144  00013144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800315c  0800315c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  0800315c  0800315c  0001315c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003164  08003164  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003164  08003164  00013164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003168  08003168  00013168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800316c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  2000005c  080031c8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  080031c8  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      000000a7  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b50c  00000000  00000000  00020133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c10  00000000  00000000  0002b63f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007d8  00000000  00000000  0002d250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000758  00000000  00000000  0002da28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fee5  00000000  00000000  0002e180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000081ea  00000000  00000000  0004e065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5cd7  00000000  00000000  0005624f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001c78  00000000  00000000  0011bf28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000128d  00000000  00000000  0011dba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <deregister_tm_clones>:
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <deregister_tm_clones+0x10>)
 80001e2:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <deregister_tm_clones+0x14>)
 80001e4:	4283      	cmp	r3, r0
 80001e6:	d002      	beq.n	80001ee <deregister_tm_clones+0xe>
 80001e8:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <deregister_tm_clones+0x18>)
 80001ea:	b103      	cbz	r3, 80001ee <deregister_tm_clones+0xe>
 80001ec:	4718      	bx	r3
 80001ee:	4770      	bx	lr
 80001f0:	2000005c 	.word	0x2000005c
 80001f4:	2000005c 	.word	0x2000005c
 80001f8:	00000000 	.word	0x00000000

080001fc <register_tm_clones>:
 80001fc:	4805      	ldr	r0, [pc, #20]	; (8000214 <register_tm_clones+0x18>)
 80001fe:	4906      	ldr	r1, [pc, #24]	; (8000218 <register_tm_clones+0x1c>)
 8000200:	1a0b      	subs	r3, r1, r0
 8000202:	0fd9      	lsrs	r1, r3, #31
 8000204:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 8000208:	1049      	asrs	r1, r1, #1
 800020a:	d002      	beq.n	8000212 <register_tm_clones+0x16>
 800020c:	4b03      	ldr	r3, [pc, #12]	; (800021c <register_tm_clones+0x20>)
 800020e:	b103      	cbz	r3, 8000212 <register_tm_clones+0x16>
 8000210:	4718      	bx	r3
 8000212:	4770      	bx	lr
 8000214:	2000005c 	.word	0x2000005c
 8000218:	2000005c 	.word	0x2000005c
 800021c:	00000000 	.word	0x00000000

08000220 <__do_global_dtors_aux>:
 8000220:	b510      	push	{r4, lr}
 8000222:	4c06      	ldr	r4, [pc, #24]	; (800023c <__do_global_dtors_aux+0x1c>)
 8000224:	7823      	ldrb	r3, [r4, #0]
 8000226:	b943      	cbnz	r3, 800023a <__do_global_dtors_aux+0x1a>
 8000228:	f7ff ffda 	bl	80001e0 <deregister_tm_clones>
 800022c:	4b04      	ldr	r3, [pc, #16]	; (8000240 <__do_global_dtors_aux+0x20>)
 800022e:	b113      	cbz	r3, 8000236 <__do_global_dtors_aux+0x16>
 8000230:	4804      	ldr	r0, [pc, #16]	; (8000244 <__do_global_dtors_aux+0x24>)
 8000232:	f3af 8000 	nop.w
 8000236:	2301      	movs	r3, #1
 8000238:	7023      	strb	r3, [r4, #0]
 800023a:	bd10      	pop	{r4, pc}
 800023c:	2000005c 	.word	0x2000005c
 8000240:	00000000 	.word	0x00000000
 8000244:	0800312c 	.word	0x0800312c

08000248 <frame_dummy>:
 8000248:	b508      	push	{r3, lr}
 800024a:	4b04      	ldr	r3, [pc, #16]	; (800025c <frame_dummy+0x14>)
 800024c:	b11b      	cbz	r3, 8000256 <frame_dummy+0xe>
 800024e:	4904      	ldr	r1, [pc, #16]	; (8000260 <frame_dummy+0x18>)
 8000250:	4804      	ldr	r0, [pc, #16]	; (8000264 <frame_dummy+0x1c>)
 8000252:	f3af 8000 	nop.w
 8000256:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800025a:	e7cf      	b.n	80001fc <register_tm_clones>
 800025c:	00000000 	.word	0x00000000
 8000260:	20000060 	.word	0x20000060
 8000264:	0800312c 	.word	0x0800312c

08000268 <__libc_init_array>:
 8000268:	b570      	push	{r4, r5, r6, lr}
 800026a:	4e0d      	ldr	r6, [pc, #52]	; (80002a0 <__libc_init_array+0x38>)
 800026c:	4d0d      	ldr	r5, [pc, #52]	; (80002a4 <__libc_init_array+0x3c>)
 800026e:	1b76      	subs	r6, r6, r5
 8000270:	10b6      	asrs	r6, r6, #2
 8000272:	d006      	beq.n	8000282 <__libc_init_array+0x1a>
 8000274:	2400      	movs	r4, #0
 8000276:	3401      	adds	r4, #1
 8000278:	f855 3b04 	ldr.w	r3, [r5], #4
 800027c:	4798      	blx	r3
 800027e:	42a6      	cmp	r6, r4
 8000280:	d1f9      	bne.n	8000276 <__libc_init_array+0xe>
 8000282:	4e09      	ldr	r6, [pc, #36]	; (80002a8 <__libc_init_array+0x40>)
 8000284:	4d09      	ldr	r5, [pc, #36]	; (80002ac <__libc_init_array+0x44>)
 8000286:	1b76      	subs	r6, r6, r5
 8000288:	f002 ff50 	bl	800312c <_init>
 800028c:	10b6      	asrs	r6, r6, #2
 800028e:	d006      	beq.n	800029e <__libc_init_array+0x36>
 8000290:	2400      	movs	r4, #0
 8000292:	3401      	adds	r4, #1
 8000294:	f855 3b04 	ldr.w	r3, [r5], #4
 8000298:	4798      	blx	r3
 800029a:	42a6      	cmp	r6, r4
 800029c:	d1f9      	bne.n	8000292 <__libc_init_array+0x2a>
 800029e:	bd70      	pop	{r4, r5, r6, pc}
 80002a0:	08003164 	.word	0x08003164
 80002a4:	08003164 	.word	0x08003164
 80002a8:	08003168 	.word	0x08003168
 80002ac:	08003164 	.word	0x08003164

080002b0 <memset>:
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	0786      	lsls	r6, r0, #30
 80002b4:	d046      	beq.n	8000344 <memset+0x94>
 80002b6:	1e54      	subs	r4, r2, #1
 80002b8:	2a00      	cmp	r2, #0
 80002ba:	d03c      	beq.n	8000336 <memset+0x86>
 80002bc:	b2ca      	uxtb	r2, r1
 80002be:	4603      	mov	r3, r0
 80002c0:	e002      	b.n	80002c8 <memset+0x18>
 80002c2:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 80002c6:	d336      	bcc.n	8000336 <memset+0x86>
 80002c8:	f803 2b01 	strb.w	r2, [r3], #1
 80002cc:	079d      	lsls	r5, r3, #30
 80002ce:	d1f8      	bne.n	80002c2 <memset+0x12>
 80002d0:	2c03      	cmp	r4, #3
 80002d2:	d929      	bls.n	8000328 <memset+0x78>
 80002d4:	b2cd      	uxtb	r5, r1
 80002d6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80002da:	2c0f      	cmp	r4, #15
 80002dc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80002e0:	d933      	bls.n	800034a <memset+0x9a>
 80002e2:	f1a4 0610 	sub.w	r6, r4, #16
 80002e6:	0936      	lsrs	r6, r6, #4
 80002e8:	f103 0720 	add.w	r7, r3, #32
 80002ec:	eb07 1706 	add.w	r7, r7, r6, lsl #4
 80002f0:	f103 0210 	add.w	r2, r3, #16
 80002f4:	e942 5504 	strd	r5, r5, [r2, #-16]
 80002f8:	e942 5502 	strd	r5, r5, [r2, #-8]
 80002fc:	3210      	adds	r2, #16
 80002fe:	42ba      	cmp	r2, r7
 8000300:	d1f8      	bne.n	80002f4 <memset+0x44>
 8000302:	1c72      	adds	r2, r6, #1
 8000304:	f014 0f0c 	tst.w	r4, #12
 8000308:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800030c:	f004 060f 	and.w	r6, r4, #15
 8000310:	d013      	beq.n	800033a <memset+0x8a>
 8000312:	1f33      	subs	r3, r6, #4
 8000314:	f023 0303 	bic.w	r3, r3, #3
 8000318:	3304      	adds	r3, #4
 800031a:	4413      	add	r3, r2
 800031c:	f842 5b04 	str.w	r5, [r2], #4
 8000320:	4293      	cmp	r3, r2
 8000322:	d1fb      	bne.n	800031c <memset+0x6c>
 8000324:	f006 0403 	and.w	r4, r6, #3
 8000328:	b12c      	cbz	r4, 8000336 <memset+0x86>
 800032a:	b2c9      	uxtb	r1, r1
 800032c:	441c      	add	r4, r3
 800032e:	f803 1b01 	strb.w	r1, [r3], #1
 8000332:	429c      	cmp	r4, r3
 8000334:	d1fb      	bne.n	800032e <memset+0x7e>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	4770      	bx	lr
 800033a:	4634      	mov	r4, r6
 800033c:	4613      	mov	r3, r2
 800033e:	2c00      	cmp	r4, #0
 8000340:	d1f3      	bne.n	800032a <memset+0x7a>
 8000342:	e7f8      	b.n	8000336 <memset+0x86>
 8000344:	4614      	mov	r4, r2
 8000346:	4603      	mov	r3, r0
 8000348:	e7c2      	b.n	80002d0 <memset+0x20>
 800034a:	461a      	mov	r2, r3
 800034c:	4626      	mov	r6, r4
 800034e:	e7e0      	b.n	8000312 <memset+0x62>
	...
 8000360:	eba2 0003 	sub.w	r0, r2, r3
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop

08000368 <strcmp>:
 8000368:	7802      	ldrb	r2, [r0, #0]
 800036a:	780b      	ldrb	r3, [r1, #0]
 800036c:	2a01      	cmp	r2, #1
 800036e:	bf28      	it	cs
 8000370:	429a      	cmpcs	r2, r3
 8000372:	d1f5      	bne.n	8000360 <memset+0xb0>
 8000374:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 8000378:	ea40 0401 	orr.w	r4, r0, r1
 800037c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8000380:	f06f 0c00 	mvn.w	ip, #0
 8000384:	ea4f 7244 	mov.w	r2, r4, lsl #29
 8000388:	b312      	cbz	r2, 80003d0 <strcmp+0x68>
 800038a:	ea80 0401 	eor.w	r4, r0, r1
 800038e:	f014 0f07 	tst.w	r4, #7
 8000392:	d16a      	bne.n	800046a <strcmp+0x102>
 8000394:	f000 0407 	and.w	r4, r0, #7
 8000398:	f020 0007 	bic.w	r0, r0, #7
 800039c:	f004 0503 	and.w	r5, r4, #3
 80003a0:	f021 0107 	bic.w	r1, r1, #7
 80003a4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80003a8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 80003ac:	f014 0f04 	tst.w	r4, #4
 80003b0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 80003b4:	fa0c f405 	lsl.w	r4, ip, r5
 80003b8:	ea62 0204 	orn	r2, r2, r4
 80003bc:	ea66 0604 	orn	r6, r6, r4
 80003c0:	d00a      	beq.n	80003d8 <strcmp+0x70>
 80003c2:	ea63 0304 	orn	r3, r3, r4
 80003c6:	4662      	mov	r2, ip
 80003c8:	ea67 0704 	orn	r7, r7, r4
 80003cc:	4666      	mov	r6, ip
 80003ce:	e003      	b.n	80003d8 <strcmp+0x70>
 80003d0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 80003d4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 80003d8:	fa82 f54c 	uadd8	r5, r2, ip
 80003dc:	ea82 0406 	eor.w	r4, r2, r6
 80003e0:	faa4 f48c 	sel	r4, r4, ip
 80003e4:	bb6c      	cbnz	r4, 8000442 <strcmp+0xda>
 80003e6:	fa83 f54c 	uadd8	r5, r3, ip
 80003ea:	ea83 0507 	eor.w	r5, r3, r7
 80003ee:	faa5 f58c 	sel	r5, r5, ip
 80003f2:	b995      	cbnz	r5, 800041a <strcmp+0xb2>
 80003f4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 80003f8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 80003fc:	fa82 f54c 	uadd8	r5, r2, ip
 8000400:	ea82 0406 	eor.w	r4, r2, r6
 8000404:	faa4 f48c 	sel	r4, r4, ip
 8000408:	fa83 f54c 	uadd8	r5, r3, ip
 800040c:	ea83 0507 	eor.w	r5, r3, r7
 8000410:	faa5 f58c 	sel	r5, r5, ip
 8000414:	4325      	orrs	r5, r4
 8000416:	d0db      	beq.n	80003d0 <strcmp+0x68>
 8000418:	b99c      	cbnz	r4, 8000442 <strcmp+0xda>
 800041a:	ba2d      	rev	r5, r5
 800041c:	fab5 f485 	clz	r4, r5
 8000420:	f024 0407 	bic.w	r4, r4, #7
 8000424:	fa27 f104 	lsr.w	r1, r7, r4
 8000428:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800042c:	fa23 f304 	lsr.w	r3, r3, r4
 8000430:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8000434:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000438:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800043c:	eba0 0001 	sub.w	r0, r0, r1
 8000440:	4770      	bx	lr
 8000442:	ba24      	rev	r4, r4
 8000444:	fab4 f484 	clz	r4, r4
 8000448:	f024 0407 	bic.w	r4, r4, #7
 800044c:	fa26 f104 	lsr.w	r1, r6, r4
 8000450:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8000454:	fa22 f204 	lsr.w	r2, r2, r4
 8000458:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800045c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000460:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000464:	eba0 0001 	sub.w	r0, r0, r1
 8000468:	4770      	bx	lr
 800046a:	f014 0f03 	tst.w	r4, #3
 800046e:	d13c      	bne.n	80004ea <strcmp+0x182>
 8000470:	f010 0403 	ands.w	r4, r0, #3
 8000474:	d128      	bne.n	80004c8 <strcmp+0x160>
 8000476:	f850 2b08 	ldr.w	r2, [r0], #8
 800047a:	f851 3b08 	ldr.w	r3, [r1], #8
 800047e:	fa82 f54c 	uadd8	r5, r2, ip
 8000482:	ea82 0503 	eor.w	r5, r2, r3
 8000486:	faa5 f58c 	sel	r5, r5, ip
 800048a:	b95d      	cbnz	r5, 80004a4 <strcmp+0x13c>
 800048c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8000490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000494:	fa82 f54c 	uadd8	r5, r2, ip
 8000498:	ea82 0503 	eor.w	r5, r2, r3
 800049c:	faa5 f58c 	sel	r5, r5, ip
 80004a0:	2d00      	cmp	r5, #0
 80004a2:	d0e8      	beq.n	8000476 <strcmp+0x10e>
 80004a4:	ba2d      	rev	r5, r5
 80004a6:	fab5 f485 	clz	r4, r5
 80004aa:	f024 0407 	bic.w	r4, r4, #7
 80004ae:	fa23 f104 	lsr.w	r1, r3, r4
 80004b2:	fa22 f204 	lsr.w	r2, r2, r4
 80004b6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 80004ba:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80004be:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80004c2:	eba0 0001 	sub.w	r0, r0, r1
 80004c6:	4770      	bx	lr
 80004c8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80004cc:	f020 0003 	bic.w	r0, r0, #3
 80004d0:	f850 2b08 	ldr.w	r2, [r0], #8
 80004d4:	f021 0103 	bic.w	r1, r1, #3
 80004d8:	f851 3b08 	ldr.w	r3, [r1], #8
 80004dc:	fa0c f404 	lsl.w	r4, ip, r4
 80004e0:	ea62 0204 	orn	r2, r2, r4
 80004e4:	ea63 0304 	orn	r3, r3, r4
 80004e8:	e7c9      	b.n	800047e <strcmp+0x116>
 80004ea:	f010 0403 	ands.w	r4, r0, #3
 80004ee:	d01a      	beq.n	8000526 <strcmp+0x1be>
 80004f0:	eba1 0104 	sub.w	r1, r1, r4
 80004f4:	f020 0003 	bic.w	r0, r0, #3
 80004f8:	07e4      	lsls	r4, r4, #31
 80004fa:	f850 2b04 	ldr.w	r2, [r0], #4
 80004fe:	d006      	beq.n	800050e <strcmp+0x1a6>
 8000500:	d20f      	bcs.n	8000522 <strcmp+0x1ba>
 8000502:	788b      	ldrb	r3, [r1, #2]
 8000504:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 8000508:	1ae4      	subs	r4, r4, r3
 800050a:	d106      	bne.n	800051a <strcmp+0x1b2>
 800050c:	b12b      	cbz	r3, 800051a <strcmp+0x1b2>
 800050e:	78cb      	ldrb	r3, [r1, #3]
 8000510:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 8000514:	1ae4      	subs	r4, r4, r3
 8000516:	d100      	bne.n	800051a <strcmp+0x1b2>
 8000518:	b91b      	cbnz	r3, 8000522 <strcmp+0x1ba>
 800051a:	4620      	mov	r0, r4
 800051c:	f85d 4b10 	ldr.w	r4, [sp], #16
 8000520:	4770      	bx	lr
 8000522:	f101 0104 	add.w	r1, r1, #4
 8000526:	f850 2b04 	ldr.w	r2, [r0], #4
 800052a:	07cc      	lsls	r4, r1, #31
 800052c:	f021 0103 	bic.w	r1, r1, #3
 8000530:	f851 3b04 	ldr.w	r3, [r1], #4
 8000534:	d848      	bhi.n	80005c8 <strcmp+0x260>
 8000536:	d224      	bcs.n	8000582 <strcmp+0x21a>
 8000538:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 800053c:	fa82 f54c 	uadd8	r5, r2, ip
 8000540:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8000544:	faa5 f58c 	sel	r5, r5, ip
 8000548:	d10a      	bne.n	8000560 <strcmp+0x1f8>
 800054a:	b965      	cbnz	r5, 8000566 <strcmp+0x1fe>
 800054c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000550:	ea84 0402 	eor.w	r4, r4, r2
 8000554:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8000558:	d10e      	bne.n	8000578 <strcmp+0x210>
 800055a:	f850 2b04 	ldr.w	r2, [r0], #4
 800055e:	e7eb      	b.n	8000538 <strcmp+0x1d0>
 8000560:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000564:	e055      	b.n	8000612 <strcmp+0x2aa>
 8000566:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800056a:	d14d      	bne.n	8000608 <strcmp+0x2a0>
 800056c:	7808      	ldrb	r0, [r1, #0]
 800056e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000572:	f1c0 0000 	rsb	r0, r0, #0
 8000576:	4770      	bx	lr
 8000578:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800057c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8000580:	e047      	b.n	8000612 <strcmp+0x2aa>
 8000582:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 8000586:	fa82 f54c 	uadd8	r5, r2, ip
 800058a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 800058e:	faa5 f58c 	sel	r5, r5, ip
 8000592:	d10a      	bne.n	80005aa <strcmp+0x242>
 8000594:	b965      	cbnz	r5, 80005b0 <strcmp+0x248>
 8000596:	f851 3b04 	ldr.w	r3, [r1], #4
 800059a:	ea84 0402 	eor.w	r4, r4, r2
 800059e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 80005a2:	d10c      	bne.n	80005be <strcmp+0x256>
 80005a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80005a8:	e7eb      	b.n	8000582 <strcmp+0x21a>
 80005aa:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80005ae:	e030      	b.n	8000612 <strcmp+0x2aa>
 80005b0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 80005b4:	d128      	bne.n	8000608 <strcmp+0x2a0>
 80005b6:	880b      	ldrh	r3, [r1, #0]
 80005b8:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80005bc:	e029      	b.n	8000612 <strcmp+0x2aa>
 80005be:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80005c2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 80005c6:	e024      	b.n	8000612 <strcmp+0x2aa>
 80005c8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 80005cc:	fa82 f54c 	uadd8	r5, r2, ip
 80005d0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 80005d4:	faa5 f58c 	sel	r5, r5, ip
 80005d8:	d10a      	bne.n	80005f0 <strcmp+0x288>
 80005da:	b965      	cbnz	r5, 80005f6 <strcmp+0x28e>
 80005dc:	f851 3b04 	ldr.w	r3, [r1], #4
 80005e0:	ea84 0402 	eor.w	r4, r4, r2
 80005e4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 80005e8:	d109      	bne.n	80005fe <strcmp+0x296>
 80005ea:	f850 2b04 	ldr.w	r2, [r0], #4
 80005ee:	e7eb      	b.n	80005c8 <strcmp+0x260>
 80005f0:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80005f4:	e00d      	b.n	8000612 <strcmp+0x2aa>
 80005f6:	f015 0fff 	tst.w	r5, #255	; 0xff
 80005fa:	d105      	bne.n	8000608 <strcmp+0x2a0>
 80005fc:	680b      	ldr	r3, [r1, #0]
 80005fe:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8000602:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000606:	e004      	b.n	8000612 <strcmp+0x2aa>
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000610:	4770      	bx	lr
 8000612:	ba12      	rev	r2, r2
 8000614:	ba1b      	rev	r3, r3
 8000616:	fa82 f44c 	uadd8	r4, r2, ip
 800061a:	ea82 0403 	eor.w	r4, r2, r3
 800061e:	faa4 f58c 	sel	r5, r4, ip
 8000622:	fab5 f485 	clz	r4, r5
 8000626:	fa02 f204 	lsl.w	r2, r2, r4
 800062a:	fa03 f304 	lsl.w	r3, r3, r4
 800062e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 8000632:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000636:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 800063a:	4770      	bx	lr

0800063c <__aeabi_uldivmod>:
 800063c:	b953      	cbnz	r3, 8000654 <__aeabi_uldivmod+0x18>
 800063e:	b94a      	cbnz	r2, 8000654 <__aeabi_uldivmod+0x18>
 8000640:	2900      	cmp	r1, #0
 8000642:	bf08      	it	eq
 8000644:	2800      	cmpeq	r0, #0
 8000646:	bf1c      	itt	ne
 8000648:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800064c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000650:	f000 b96e 	b.w	8000930 <__aeabi_idiv0>
 8000654:	f1ad 0c08 	sub.w	ip, sp, #8
 8000658:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800065c:	f000 f806 	bl	800066c <__udivmoddi4>
 8000660:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000664:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000668:	b004      	add	sp, #16
 800066a:	4770      	bx	lr

0800066c <__udivmoddi4>:
 800066c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000670:	9d08      	ldr	r5, [sp, #32]
 8000672:	4604      	mov	r4, r0
 8000674:	468c      	mov	ip, r1
 8000676:	2b00      	cmp	r3, #0
 8000678:	f040 8083 	bne.w	8000782 <__udivmoddi4+0x116>
 800067c:	428a      	cmp	r2, r1
 800067e:	4617      	mov	r7, r2
 8000680:	d947      	bls.n	8000712 <__udivmoddi4+0xa6>
 8000682:	fab2 f282 	clz	r2, r2
 8000686:	b142      	cbz	r2, 800069a <__udivmoddi4+0x2e>
 8000688:	f1c2 0020 	rsb	r0, r2, #32
 800068c:	fa24 f000 	lsr.w	r0, r4, r0
 8000690:	4091      	lsls	r1, r2
 8000692:	4097      	lsls	r7, r2
 8000694:	ea40 0c01 	orr.w	ip, r0, r1
 8000698:	4094      	lsls	r4, r2
 800069a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800069e:	0c23      	lsrs	r3, r4, #16
 80006a0:	fbbc f6f8 	udiv	r6, ip, r8
 80006a4:	fa1f fe87 	uxth.w	lr, r7
 80006a8:	fb08 c116 	mls	r1, r8, r6, ip
 80006ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006b0:	fb06 f10e 	mul.w	r1, r6, lr
 80006b4:	4299      	cmp	r1, r3
 80006b6:	d909      	bls.n	80006cc <__udivmoddi4+0x60>
 80006b8:	18fb      	adds	r3, r7, r3
 80006ba:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80006be:	f080 8119 	bcs.w	80008f4 <__udivmoddi4+0x288>
 80006c2:	4299      	cmp	r1, r3
 80006c4:	f240 8116 	bls.w	80008f4 <__udivmoddi4+0x288>
 80006c8:	3e02      	subs	r6, #2
 80006ca:	443b      	add	r3, r7
 80006cc:	1a5b      	subs	r3, r3, r1
 80006ce:	b2a4      	uxth	r4, r4
 80006d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80006d4:	fb08 3310 	mls	r3, r8, r0, r3
 80006d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80006e0:	45a6      	cmp	lr, r4
 80006e2:	d909      	bls.n	80006f8 <__udivmoddi4+0x8c>
 80006e4:	193c      	adds	r4, r7, r4
 80006e6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80006ea:	f080 8105 	bcs.w	80008f8 <__udivmoddi4+0x28c>
 80006ee:	45a6      	cmp	lr, r4
 80006f0:	f240 8102 	bls.w	80008f8 <__udivmoddi4+0x28c>
 80006f4:	3802      	subs	r0, #2
 80006f6:	443c      	add	r4, r7
 80006f8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006fc:	eba4 040e 	sub.w	r4, r4, lr
 8000700:	2600      	movs	r6, #0
 8000702:	b11d      	cbz	r5, 800070c <__udivmoddi4+0xa0>
 8000704:	40d4      	lsrs	r4, r2
 8000706:	2300      	movs	r3, #0
 8000708:	e9c5 4300 	strd	r4, r3, [r5]
 800070c:	4631      	mov	r1, r6
 800070e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000712:	b902      	cbnz	r2, 8000716 <__udivmoddi4+0xaa>
 8000714:	deff      	udf	#255	; 0xff
 8000716:	fab2 f282 	clz	r2, r2
 800071a:	2a00      	cmp	r2, #0
 800071c:	d150      	bne.n	80007c0 <__udivmoddi4+0x154>
 800071e:	1bcb      	subs	r3, r1, r7
 8000720:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000724:	fa1f f887 	uxth.w	r8, r7
 8000728:	2601      	movs	r6, #1
 800072a:	fbb3 fcfe 	udiv	ip, r3, lr
 800072e:	0c21      	lsrs	r1, r4, #16
 8000730:	fb0e 331c 	mls	r3, lr, ip, r3
 8000734:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000738:	fb08 f30c 	mul.w	r3, r8, ip
 800073c:	428b      	cmp	r3, r1
 800073e:	d907      	bls.n	8000750 <__udivmoddi4+0xe4>
 8000740:	1879      	adds	r1, r7, r1
 8000742:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000746:	d202      	bcs.n	800074e <__udivmoddi4+0xe2>
 8000748:	428b      	cmp	r3, r1
 800074a:	f200 80e9 	bhi.w	8000920 <__udivmoddi4+0x2b4>
 800074e:	4684      	mov	ip, r0
 8000750:	1ac9      	subs	r1, r1, r3
 8000752:	b2a3      	uxth	r3, r4
 8000754:	fbb1 f0fe 	udiv	r0, r1, lr
 8000758:	fb0e 1110 	mls	r1, lr, r0, r1
 800075c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000760:	fb08 f800 	mul.w	r8, r8, r0
 8000764:	45a0      	cmp	r8, r4
 8000766:	d907      	bls.n	8000778 <__udivmoddi4+0x10c>
 8000768:	193c      	adds	r4, r7, r4
 800076a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800076e:	d202      	bcs.n	8000776 <__udivmoddi4+0x10a>
 8000770:	45a0      	cmp	r8, r4
 8000772:	f200 80d9 	bhi.w	8000928 <__udivmoddi4+0x2bc>
 8000776:	4618      	mov	r0, r3
 8000778:	eba4 0408 	sub.w	r4, r4, r8
 800077c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000780:	e7bf      	b.n	8000702 <__udivmoddi4+0x96>
 8000782:	428b      	cmp	r3, r1
 8000784:	d909      	bls.n	800079a <__udivmoddi4+0x12e>
 8000786:	2d00      	cmp	r5, #0
 8000788:	f000 80b1 	beq.w	80008ee <__udivmoddi4+0x282>
 800078c:	2600      	movs	r6, #0
 800078e:	e9c5 0100 	strd	r0, r1, [r5]
 8000792:	4630      	mov	r0, r6
 8000794:	4631      	mov	r1, r6
 8000796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800079a:	fab3 f683 	clz	r6, r3
 800079e:	2e00      	cmp	r6, #0
 80007a0:	d14a      	bne.n	8000838 <__udivmoddi4+0x1cc>
 80007a2:	428b      	cmp	r3, r1
 80007a4:	d302      	bcc.n	80007ac <__udivmoddi4+0x140>
 80007a6:	4282      	cmp	r2, r0
 80007a8:	f200 80b8 	bhi.w	800091c <__udivmoddi4+0x2b0>
 80007ac:	1a84      	subs	r4, r0, r2
 80007ae:	eb61 0103 	sbc.w	r1, r1, r3
 80007b2:	2001      	movs	r0, #1
 80007b4:	468c      	mov	ip, r1
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	d0a8      	beq.n	800070c <__udivmoddi4+0xa0>
 80007ba:	e9c5 4c00 	strd	r4, ip, [r5]
 80007be:	e7a5      	b.n	800070c <__udivmoddi4+0xa0>
 80007c0:	f1c2 0320 	rsb	r3, r2, #32
 80007c4:	fa20 f603 	lsr.w	r6, r0, r3
 80007c8:	4097      	lsls	r7, r2
 80007ca:	fa01 f002 	lsl.w	r0, r1, r2
 80007ce:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007d2:	40d9      	lsrs	r1, r3
 80007d4:	4330      	orrs	r0, r6
 80007d6:	0c03      	lsrs	r3, r0, #16
 80007d8:	fbb1 f6fe 	udiv	r6, r1, lr
 80007dc:	fa1f f887 	uxth.w	r8, r7
 80007e0:	fb0e 1116 	mls	r1, lr, r6, r1
 80007e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007e8:	fb06 f108 	mul.w	r1, r6, r8
 80007ec:	4299      	cmp	r1, r3
 80007ee:	fa04 f402 	lsl.w	r4, r4, r2
 80007f2:	d909      	bls.n	8000808 <__udivmoddi4+0x19c>
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80007fa:	f080 808d 	bcs.w	8000918 <__udivmoddi4+0x2ac>
 80007fe:	4299      	cmp	r1, r3
 8000800:	f240 808a 	bls.w	8000918 <__udivmoddi4+0x2ac>
 8000804:	3e02      	subs	r6, #2
 8000806:	443b      	add	r3, r7
 8000808:	1a5b      	subs	r3, r3, r1
 800080a:	b281      	uxth	r1, r0
 800080c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000810:	fb0e 3310 	mls	r3, lr, r0, r3
 8000814:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000818:	fb00 f308 	mul.w	r3, r0, r8
 800081c:	428b      	cmp	r3, r1
 800081e:	d907      	bls.n	8000830 <__udivmoddi4+0x1c4>
 8000820:	1879      	adds	r1, r7, r1
 8000822:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000826:	d273      	bcs.n	8000910 <__udivmoddi4+0x2a4>
 8000828:	428b      	cmp	r3, r1
 800082a:	d971      	bls.n	8000910 <__udivmoddi4+0x2a4>
 800082c:	3802      	subs	r0, #2
 800082e:	4439      	add	r1, r7
 8000830:	1acb      	subs	r3, r1, r3
 8000832:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000836:	e778      	b.n	800072a <__udivmoddi4+0xbe>
 8000838:	f1c6 0c20 	rsb	ip, r6, #32
 800083c:	fa03 f406 	lsl.w	r4, r3, r6
 8000840:	fa22 f30c 	lsr.w	r3, r2, ip
 8000844:	431c      	orrs	r4, r3
 8000846:	fa20 f70c 	lsr.w	r7, r0, ip
 800084a:	fa01 f306 	lsl.w	r3, r1, r6
 800084e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000852:	fa21 f10c 	lsr.w	r1, r1, ip
 8000856:	431f      	orrs	r7, r3
 8000858:	0c3b      	lsrs	r3, r7, #16
 800085a:	fbb1 f9fe 	udiv	r9, r1, lr
 800085e:	fa1f f884 	uxth.w	r8, r4
 8000862:	fb0e 1119 	mls	r1, lr, r9, r1
 8000866:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800086a:	fb09 fa08 	mul.w	sl, r9, r8
 800086e:	458a      	cmp	sl, r1
 8000870:	fa02 f206 	lsl.w	r2, r2, r6
 8000874:	fa00 f306 	lsl.w	r3, r0, r6
 8000878:	d908      	bls.n	800088c <__udivmoddi4+0x220>
 800087a:	1861      	adds	r1, r4, r1
 800087c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000880:	d248      	bcs.n	8000914 <__udivmoddi4+0x2a8>
 8000882:	458a      	cmp	sl, r1
 8000884:	d946      	bls.n	8000914 <__udivmoddi4+0x2a8>
 8000886:	f1a9 0902 	sub.w	r9, r9, #2
 800088a:	4421      	add	r1, r4
 800088c:	eba1 010a 	sub.w	r1, r1, sl
 8000890:	b2bf      	uxth	r7, r7
 8000892:	fbb1 f0fe 	udiv	r0, r1, lr
 8000896:	fb0e 1110 	mls	r1, lr, r0, r1
 800089a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800089e:	fb00 f808 	mul.w	r8, r0, r8
 80008a2:	45b8      	cmp	r8, r7
 80008a4:	d907      	bls.n	80008b6 <__udivmoddi4+0x24a>
 80008a6:	19e7      	adds	r7, r4, r7
 80008a8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80008ac:	d22e      	bcs.n	800090c <__udivmoddi4+0x2a0>
 80008ae:	45b8      	cmp	r8, r7
 80008b0:	d92c      	bls.n	800090c <__udivmoddi4+0x2a0>
 80008b2:	3802      	subs	r0, #2
 80008b4:	4427      	add	r7, r4
 80008b6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008ba:	eba7 0708 	sub.w	r7, r7, r8
 80008be:	fba0 8902 	umull	r8, r9, r0, r2
 80008c2:	454f      	cmp	r7, r9
 80008c4:	46c6      	mov	lr, r8
 80008c6:	4649      	mov	r1, r9
 80008c8:	d31a      	bcc.n	8000900 <__udivmoddi4+0x294>
 80008ca:	d017      	beq.n	80008fc <__udivmoddi4+0x290>
 80008cc:	b15d      	cbz	r5, 80008e6 <__udivmoddi4+0x27a>
 80008ce:	ebb3 020e 	subs.w	r2, r3, lr
 80008d2:	eb67 0701 	sbc.w	r7, r7, r1
 80008d6:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008da:	40f2      	lsrs	r2, r6
 80008dc:	ea4c 0202 	orr.w	r2, ip, r2
 80008e0:	40f7      	lsrs	r7, r6
 80008e2:	e9c5 2700 	strd	r2, r7, [r5]
 80008e6:	2600      	movs	r6, #0
 80008e8:	4631      	mov	r1, r6
 80008ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ee:	462e      	mov	r6, r5
 80008f0:	4628      	mov	r0, r5
 80008f2:	e70b      	b.n	800070c <__udivmoddi4+0xa0>
 80008f4:	4606      	mov	r6, r0
 80008f6:	e6e9      	b.n	80006cc <__udivmoddi4+0x60>
 80008f8:	4618      	mov	r0, r3
 80008fa:	e6fd      	b.n	80006f8 <__udivmoddi4+0x8c>
 80008fc:	4543      	cmp	r3, r8
 80008fe:	d2e5      	bcs.n	80008cc <__udivmoddi4+0x260>
 8000900:	ebb8 0e02 	subs.w	lr, r8, r2
 8000904:	eb69 0104 	sbc.w	r1, r9, r4
 8000908:	3801      	subs	r0, #1
 800090a:	e7df      	b.n	80008cc <__udivmoddi4+0x260>
 800090c:	4608      	mov	r0, r1
 800090e:	e7d2      	b.n	80008b6 <__udivmoddi4+0x24a>
 8000910:	4660      	mov	r0, ip
 8000912:	e78d      	b.n	8000830 <__udivmoddi4+0x1c4>
 8000914:	4681      	mov	r9, r0
 8000916:	e7b9      	b.n	800088c <__udivmoddi4+0x220>
 8000918:	4666      	mov	r6, ip
 800091a:	e775      	b.n	8000808 <__udivmoddi4+0x19c>
 800091c:	4630      	mov	r0, r6
 800091e:	e74a      	b.n	80007b6 <__udivmoddi4+0x14a>
 8000920:	f1ac 0c02 	sub.w	ip, ip, #2
 8000924:	4439      	add	r1, r7
 8000926:	e713      	b.n	8000750 <__udivmoddi4+0xe4>
 8000928:	3802      	subs	r0, #2
 800092a:	443c      	add	r4, r7
 800092c:	e724      	b.n	8000778 <__udivmoddi4+0x10c>
 800092e:	bf00      	nop

08000930 <__aeabi_idiv0>:
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop

08000934 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093a:	f000 fa81 	bl	8000e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093e:	f000 f88b 	bl	8000a58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000942:	f000 f921 	bl	8000b88 <MX_GPIO_Init>
//  MX_DMA_Init();
  MX_USART2_UART_Init();
 8000946:	f000 f8f5 	bl	8000b34 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // HAL_UART_Receive_DMA(&huart2,in_message,11);

  HAL_UART_Transmit(&huart2, hello, sizeof(hello),10);
 800094a:	230a      	movs	r3, #10
 800094c:	220b      	movs	r2, #11
 800094e:	4937      	ldr	r1, [pc, #220]	; (8000a2c <main+0xf8>)
 8000950:	4837      	ldr	r0, [pc, #220]	; (8000a30 <main+0xfc>)
 8000952:	f001 fc2e 	bl	80021b2 <HAL_UART_Transmit>
//  while (huart2.gState == HAL_UART_STATE_BUSY_TX) {}

	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	2120      	movs	r1, #32
 800095a:	4836      	ldr	r0, [pc, #216]	; (8000a34 <main+0x100>)
 800095c:	f000 fe3e 	bl	80015dc <HAL_GPIO_WritePin>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int blinking = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	607b      	str	r3, [r7, #4]

  while (1)
  {
	    HAL_UART_Receive(&huart2, in_message, sizeof(in_message)-1,360000);
 8000964:	4b34      	ldr	r3, [pc, #208]	; (8000a38 <main+0x104>)
 8000966:	2204      	movs	r2, #4
 8000968:	4934      	ldr	r1, [pc, #208]	; (8000a3c <main+0x108>)
 800096a:	4831      	ldr	r0, [pc, #196]	; (8000a30 <main+0xfc>)
 800096c:	f001 fcb3 	bl	80022d6 <HAL_UART_Receive>

			HAL_UART_Transmit(&huart2, in_message,  sizeof(in_message),10);
 8000970:	230a      	movs	r3, #10
 8000972:	2205      	movs	r2, #5
 8000974:	4931      	ldr	r1, [pc, #196]	; (8000a3c <main+0x108>)
 8000976:	482e      	ldr	r0, [pc, #184]	; (8000a30 <main+0xfc>)
 8000978:	f001 fc1b 	bl	80021b2 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, enter, sizeof(enter),10);
 800097c:	230a      	movs	r3, #10
 800097e:	2202      	movs	r2, #2
 8000980:	492f      	ldr	r1, [pc, #188]	; (8000a40 <main+0x10c>)
 8000982:	482b      	ldr	r0, [pc, #172]	; (8000a30 <main+0xfc>)
 8000984:	f001 fc15 	bl	80021b2 <HAL_UART_Transmit>
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000988:	2120      	movs	r1, #32
 800098a:	482a      	ldr	r0, [pc, #168]	; (8000a34 <main+0x100>)
 800098c:	f000 fe3f 	bl	800160e <HAL_GPIO_TogglePin>
      /*
       ALT1 START
       I can't test this code on my board, because i have a problem with connecting it to my PC, so if i understand correctly, HAL_UART_Receive after 360k microseconds must return timeout value (but i don't know if it must return something to "in_message") and code must continue. 
       So if "blnk" has been sent, and in_message = "", or probably "xxxx" or some timeout value, it must do TogglePin  
      */
      if (blinking && strcmp(in_message, "\0")==0)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d00a      	beq.n	80009ac <main+0x78>
 8000996:	4b29      	ldr	r3, [pc, #164]	; (8000a3c <main+0x108>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d106      	bne.n	80009ac <main+0x78>
      {
          HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 800099e:	2120      	movs	r1, #32
 80009a0:	4824      	ldr	r0, [pc, #144]	; (8000a34 <main+0x100>)
 80009a2:	f000 fe34 	bl	800160e <HAL_GPIO_TogglePin>
          HAL_Delay(100);
 80009a6:	2064      	movs	r0, #100	; 0x64
 80009a8:	f000 fabc 	bl	8000f24 <HAL_Delay>
      }
      
      if (strcmp(in_message, "\0") != 0)
 80009ac:	4b23      	ldr	r3, [pc, #140]	; (8000a3c <main+0x108>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d037      	beq.n	8000a24 <main+0xf0>
        if (strcmp(in_message, led_blink)==0)
 80009b4:	4923      	ldr	r1, [pc, #140]	; (8000a44 <main+0x110>)
 80009b6:	4821      	ldr	r0, [pc, #132]	; (8000a3c <main+0x108>)
 80009b8:	f7ff fcd6 	bl	8000368 <strcmp>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d102      	bne.n	80009c8 <main+0x94>
          blinking = 1;
 80009c2:	2301      	movs	r3, #1
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	e02d      	b.n	8000a24 <main+0xf0>
        else
        {
          if (strcmp(in_message,led_on)==0)
 80009c8:	491f      	ldr	r1, [pc, #124]	; (8000a48 <main+0x114>)
 80009ca:	481c      	ldr	r0, [pc, #112]	; (8000a3c <main+0x108>)
 80009cc:	f7ff fccc 	bl	8000368 <strcmp>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d105      	bne.n	80009e2 <main+0xae>
            HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 80009d6:	2201      	movs	r2, #1
 80009d8:	2120      	movs	r1, #32
 80009da:	4816      	ldr	r0, [pc, #88]	; (8000a34 <main+0x100>)
 80009dc:	f000 fdfe 	bl	80015dc <HAL_GPIO_WritePin>
 80009e0:	e01e      	b.n	8000a20 <main+0xec>
          else if (strcmp(in_message, led_off)==0)
 80009e2:	491a      	ldr	r1, [pc, #104]	; (8000a4c <main+0x118>)
 80009e4:	4815      	ldr	r0, [pc, #84]	; (8000a3c <main+0x108>)
 80009e6:	f7ff fcbf 	bl	8000368 <strcmp>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d105      	bne.n	80009fc <main+0xc8>
            HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2120      	movs	r1, #32
 80009f4:	480f      	ldr	r0, [pc, #60]	; (8000a34 <main+0x100>)
 80009f6:	f000 fdf1 	bl	80015dc <HAL_GPIO_WritePin>
 80009fa:	e011      	b.n	8000a20 <main+0xec>
          else if (strcmp(in_message, led_toggle)==0)
 80009fc:	4914      	ldr	r1, [pc, #80]	; (8000a50 <main+0x11c>)
 80009fe:	480f      	ldr	r0, [pc, #60]	; (8000a3c <main+0x108>)
 8000a00:	f7ff fcb2 	bl	8000368 <strcmp>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d104      	bne.n	8000a14 <main+0xe0>
            HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8000a0a:	2120      	movs	r1, #32
 8000a0c:	4809      	ldr	r0, [pc, #36]	; (8000a34 <main+0x100>)
 8000a0e:	f000 fdfe 	bl	800160e <HAL_GPIO_TogglePin>
 8000a12:	e005      	b.n	8000a20 <main+0xec>
          else
            HAL_UART_Transmit(&huart2, error, sizeof(error),10);
 8000a14:	230a      	movs	r3, #10
 8000a16:	2215      	movs	r2, #21
 8000a18:	490e      	ldr	r1, [pc, #56]	; (8000a54 <main+0x120>)
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <main+0xfc>)
 8000a1c:	f001 fbc9 	bl	80021b2 <HAL_UART_Transmit>
          blinking = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	607b      	str	r3, [r7, #4]
        ALT2 STOP
      */

//	  	 }

	 HAL_Delay(10);
 8000a24:	200a      	movs	r0, #10
 8000a26:	f000 fa7d 	bl	8000f24 <HAL_Delay>
	    HAL_UART_Receive(&huart2, in_message, sizeof(in_message)-1,360000);
 8000a2a:	e79b      	b.n	8000964 <main+0x30>
 8000a2c:	20000000 	.word	0x20000000
 8000a30:	20000078 	.word	0x20000078
 8000a34:	40020000 	.word	0x40020000
 8000a38:	00057e40 	.word	0x00057e40
 8000a3c:	20000024 	.word	0x20000024
 8000a40:	2000002c 	.word	0x2000002c
 8000a44:	20000048 	.word	0x20000048
 8000a48:	20000038 	.word	0x20000038
 8000a4c:	20000030 	.word	0x20000030
 8000a50:	20000040 	.word	0x20000040
 8000a54:	2000000c 	.word	0x2000000c

08000a58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b094      	sub	sp, #80	; 0x50
 8000a5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	2234      	movs	r2, #52	; 0x34
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fc22 	bl	80002b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a6c:	f107 0308 	add.w	r3, r7, #8
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	4b2a      	ldr	r3, [pc, #168]	; (8000b2c <SystemClock_Config+0xd4>)
 8000a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a84:	4a29      	ldr	r2, [pc, #164]	; (8000b2c <SystemClock_Config+0xd4>)
 8000a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8c:	4b27      	ldr	r3, [pc, #156]	; (8000b2c <SystemClock_Config+0xd4>)
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a98:	2300      	movs	r3, #0
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	4b24      	ldr	r3, [pc, #144]	; (8000b30 <SystemClock_Config+0xd8>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000aa4:	4a22      	ldr	r2, [pc, #136]	; (8000b30 <SystemClock_Config+0xd8>)
 8000aa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aaa:	6013      	str	r3, [r2, #0]
 8000aac:	4b20      	ldr	r3, [pc, #128]	; (8000b30 <SystemClock_Config+0xd8>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000abc:	2301      	movs	r3, #1
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ac0:	2310      	movs	r3, #16
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000acc:	2310      	movs	r3, #16
 8000ace:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ad0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ad4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ad6:	2304      	movs	r3, #4
 8000ad8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ada:	2302      	movs	r3, #2
 8000adc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f001 f878 	bl	8001bdc <HAL_RCC_OscConfig>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000af2:	f000 f8b7 	bl	8000c64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af6:	230f      	movs	r3, #15
 8000af8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000afa:	2302      	movs	r3, #2
 8000afc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b0c:	f107 0308 	add.w	r3, r7, #8
 8000b10:	2102      	movs	r1, #2
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 fd96 	bl	8001644 <HAL_RCC_ClockConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000b1e:	f000 f8a1 	bl	8000c64 <Error_Handler>
  }
}
 8000b22:	bf00      	nop
 8000b24:	3750      	adds	r7, #80	; 0x50
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40007000 	.word	0x40007000

08000b34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b3a:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <MX_USART2_UART_Init+0x50>)
 8000b3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b58:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b6c:	f001 fad4 	bl	8002118 <HAL_UART_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b76:	f000 f875 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000078 	.word	0x20000078
 8000b84:	40004400 	.word	0x40004400

08000b88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
 8000b9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	4b2d      	ldr	r3, [pc, #180]	; (8000c58 <MX_GPIO_Init+0xd0>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a2c      	ldr	r2, [pc, #176]	; (8000c58 <MX_GPIO_Init+0xd0>)
 8000ba8:	f043 0304 	orr.w	r3, r3, #4
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b2a      	ldr	r3, [pc, #168]	; (8000c58 <MX_GPIO_Init+0xd0>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0304 	and.w	r3, r3, #4
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	4b26      	ldr	r3, [pc, #152]	; (8000c58 <MX_GPIO_Init+0xd0>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a25      	ldr	r2, [pc, #148]	; (8000c58 <MX_GPIO_Init+0xd0>)
 8000bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b23      	ldr	r3, [pc, #140]	; (8000c58 <MX_GPIO_Init+0xd0>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <MX_GPIO_Init+0xd0>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a1e      	ldr	r2, [pc, #120]	; (8000c58 <MX_GPIO_Init+0xd0>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <MX_GPIO_Init+0xd0>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <MX_GPIO_Init+0xd0>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a17      	ldr	r2, [pc, #92]	; (8000c58 <MX_GPIO_Init+0xd0>)
 8000bfc:	f043 0302 	orr.w	r3, r3, #2
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <MX_GPIO_Init+0xd0>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2120      	movs	r1, #32
 8000c12:	4812      	ldr	r0, [pc, #72]	; (8000c5c <MX_GPIO_Init+0xd4>)
 8000c14:	f000 fce2 	bl	80015dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c1e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	480c      	ldr	r0, [pc, #48]	; (8000c60 <MX_GPIO_Init+0xd8>)
 8000c30:	f000 fb40 	bl	80012b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c34:	2320      	movs	r3, #32
 8000c36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4804      	ldr	r0, [pc, #16]	; (8000c5c <MX_GPIO_Init+0xd4>)
 8000c4c:	f000 fb32 	bl	80012b4 <HAL_GPIO_Init>

}
 8000c50:	bf00      	nop
 8000c52:	3728      	adds	r7, #40	; 0x28
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020000 	.word	0x40020000
 8000c60:	40020800 	.word	0x40020800

08000c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c68:	b672      	cpsid	i
}
 8000c6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <Error_Handler+0x8>
	...

08000c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	4a0f      	ldr	r2, [pc, #60]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c84:	6453      	str	r3, [r2, #68]	; 0x44
 8000c86:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	603b      	str	r3, [r7, #0]
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	4a08      	ldr	r2, [pc, #32]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_MspInit+0x4c>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cae:	2007      	movs	r0, #7
 8000cb0:	f000 fa2c 	bl	800110c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40023800 	.word	0x40023800

08000cc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a1d      	ldr	r2, [pc, #116]	; (8000d54 <HAL_UART_MspInit+0x94>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d133      	bne.n	8000d4a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <HAL_UART_MspInit+0x98>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	4a1b      	ldr	r2, [pc, #108]	; (8000d58 <HAL_UART_MspInit+0x98>)
 8000cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf2:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <HAL_UART_MspInit+0x98>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <HAL_UART_MspInit+0x98>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a14      	ldr	r2, [pc, #80]	; (8000d58 <HAL_UART_MspInit+0x98>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <HAL_UART_MspInit+0x98>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d1a:	230c      	movs	r3, #12
 8000d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d26:	2303      	movs	r3, #3
 8000d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d2a:	2307      	movs	r3, #7
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	4619      	mov	r1, r3
 8000d34:	4809      	ldr	r0, [pc, #36]	; (8000d5c <HAL_UART_MspInit+0x9c>)
 8000d36:	f000 fabd 	bl	80012b4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2026      	movs	r0, #38	; 0x26
 8000d40:	f000 f9ef 	bl	8001122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d44:	2026      	movs	r0, #38	; 0x26
 8000d46:	f000 fa08 	bl	800115a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d4a:	bf00      	nop
 8000d4c:	3728      	adds	r7, #40	; 0x28
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40004400 	.word	0x40004400
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40020000 	.word	0x40020000

08000d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <NMI_Handler+0x4>

08000d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <HardFault_Handler+0x4>

08000d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <MemManage_Handler+0x4>

08000d72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <BusFault_Handler+0x4>

08000d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <UsageFault_Handler+0x4>

08000d7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dac:	f000 f89a 	bl	8000ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000db8:	4802      	ldr	r0, [pc, #8]	; (8000dc4 <USART2_IRQHandler+0x10>)
 8000dba:	f001 fb2f 	bl	800241c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000078 	.word	0x20000078

08000dc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <SystemInit+0x20>)
 8000dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dd2:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <SystemInit+0x20>)
 8000dd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000df0:	480d      	ldr	r0, [pc, #52]	; (8000e28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000df2:	490e      	ldr	r1, [pc, #56]	; (8000e2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000df4:	4a0e      	ldr	r2, [pc, #56]	; (8000e30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df8:	e002      	b.n	8000e00 <LoopCopyDataInit>

08000dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfe:	3304      	adds	r3, #4

08000e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e04:	d3f9      	bcc.n	8000dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e06:	4a0b      	ldr	r2, [pc, #44]	; (8000e34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e08:	4c0b      	ldr	r4, [pc, #44]	; (8000e38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e0c:	e001      	b.n	8000e12 <LoopFillZerobss>

08000e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e10:	3204      	adds	r2, #4

08000e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e14:	d3fb      	bcc.n	8000e0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e16:	f7ff ffd7 	bl	8000dc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e1a:	f7ff fa25 	bl	8000268 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1e:	f7ff fd89 	bl	8000934 <main>
  bx  lr    
 8000e22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e2c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e30:	0800316c 	.word	0x0800316c
  ldr r2, =_sbss
 8000e34:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e38:	200000c0 	.word	0x200000c0

08000e3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e3c:	e7fe      	b.n	8000e3c <ADC_IRQHandler>
	...

08000e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e44:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <HAL_Init+0x40>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0d      	ldr	r2, [pc, #52]	; (8000e80 <HAL_Init+0x40>)
 8000e4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e50:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <HAL_Init+0x40>)
 8000e56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a07      	ldr	r2, [pc, #28]	; (8000e80 <HAL_Init+0x40>)
 8000e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e68:	2003      	movs	r0, #3
 8000e6a:	f000 f94f 	bl	800110c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f000 f808 	bl	8000e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e74:	f7ff fefc 	bl	8000c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023c00 	.word	0x40023c00

08000e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_InitTick+0x54>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_InitTick+0x58>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4619      	mov	r1, r3
 8000e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 f967 	bl	8001176 <HAL_SYSTICK_Config>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e00e      	b.n	8000ed0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b0f      	cmp	r3, #15
 8000eb6:	d80a      	bhi.n	8000ece <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ec0:	f000 f92f 	bl	8001122 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec4:	4a06      	ldr	r2, [pc, #24]	; (8000ee0 <HAL_InitTick+0x5c>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	e000      	b.n	8000ed0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000050 	.word	0x20000050
 8000edc:	20000058 	.word	0x20000058
 8000ee0:	20000054 	.word	0x20000054

08000ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_IncTick+0x20>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	461a      	mov	r2, r3
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_IncTick+0x24>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <HAL_IncTick+0x24>)
 8000ef6:	6013      	str	r3, [r2, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000058 	.word	0x20000058
 8000f08:	200000bc 	.word	0x200000bc

08000f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <HAL_GetTick+0x14>)
 8000f12:	681b      	ldr	r3, [r3, #0]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	200000bc 	.word	0x200000bc

08000f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f2c:	f7ff ffee 	bl	8000f0c <HAL_GetTick>
 8000f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f3c:	d005      	beq.n	8000f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_Delay+0x44>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	461a      	mov	r2, r3
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4413      	add	r3, r2
 8000f48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f4a:	bf00      	nop
 8000f4c:	f7ff ffde 	bl	8000f0c <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d8f7      	bhi.n	8000f4c <HAL_Delay+0x28>
  {
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000058 	.word	0x20000058

08000f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f88:	4013      	ands	r3, r2
 8000f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f9e:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	60d3      	str	r3, [r2, #12]
}
 8000fa4:	bf00      	nop
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb8:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <__NVIC_GetPriorityGrouping+0x18>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	0a1b      	lsrs	r3, r3, #8
 8000fbe:	f003 0307 	and.w	r3, r3, #7
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	db0b      	blt.n	8000ffa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	f003 021f 	and.w	r2, r3, #31
 8000fe8:	4907      	ldr	r1, [pc, #28]	; (8001008 <__NVIC_EnableIRQ+0x38>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	095b      	lsrs	r3, r3, #5
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000e100 	.word	0xe000e100

0800100c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	6039      	str	r1, [r7, #0]
 8001016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101c:	2b00      	cmp	r3, #0
 800101e:	db0a      	blt.n	8001036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	b2da      	uxtb	r2, r3
 8001024:	490c      	ldr	r1, [pc, #48]	; (8001058 <__NVIC_SetPriority+0x4c>)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	0112      	lsls	r2, r2, #4
 800102c:	b2d2      	uxtb	r2, r2
 800102e:	440b      	add	r3, r1
 8001030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001034:	e00a      	b.n	800104c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4908      	ldr	r1, [pc, #32]	; (800105c <__NVIC_SetPriority+0x50>)
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	f003 030f 	and.w	r3, r3, #15
 8001042:	3b04      	subs	r3, #4
 8001044:	0112      	lsls	r2, r2, #4
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	440b      	add	r3, r1
 800104a:	761a      	strb	r2, [r3, #24]
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	e000e100 	.word	0xe000e100
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001060:	b480      	push	{r7}
 8001062:	b089      	sub	sp, #36	; 0x24
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	f1c3 0307 	rsb	r3, r3, #7
 800107a:	2b04      	cmp	r3, #4
 800107c:	bf28      	it	cs
 800107e:	2304      	movcs	r3, #4
 8001080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3304      	adds	r3, #4
 8001086:	2b06      	cmp	r3, #6
 8001088:	d902      	bls.n	8001090 <NVIC_EncodePriority+0x30>
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3b03      	subs	r3, #3
 800108e:	e000      	b.n	8001092 <NVIC_EncodePriority+0x32>
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43da      	mvns	r2, r3
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	401a      	ands	r2, r3
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	fa01 f303 	lsl.w	r3, r1, r3
 80010b2:	43d9      	mvns	r1, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b8:	4313      	orrs	r3, r2
         );
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3724      	adds	r7, #36	; 0x24
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
	...

080010c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d8:	d301      	bcc.n	80010de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010da:	2301      	movs	r3, #1
 80010dc:	e00f      	b.n	80010fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010de:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <SysTick_Config+0x40>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e6:	210f      	movs	r1, #15
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010ec:	f7ff ff8e 	bl	800100c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <SysTick_Config+0x40>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f6:	4b04      	ldr	r3, [pc, #16]	; (8001108 <SysTick_Config+0x40>)
 80010f8:	2207      	movs	r2, #7
 80010fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	e000e010 	.word	0xe000e010

0800110c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ff29 	bl	8000f6c <__NVIC_SetPriorityGrouping>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001122:	b580      	push	{r7, lr}
 8001124:	b086      	sub	sp, #24
 8001126:	af00      	add	r7, sp, #0
 8001128:	4603      	mov	r3, r0
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
 800112e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001134:	f7ff ff3e 	bl	8000fb4 <__NVIC_GetPriorityGrouping>
 8001138:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	68b9      	ldr	r1, [r7, #8]
 800113e:	6978      	ldr	r0, [r7, #20]
 8001140:	f7ff ff8e 	bl	8001060 <NVIC_EncodePriority>
 8001144:	4602      	mov	r2, r0
 8001146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff5d 	bl	800100c <__NVIC_SetPriority>
}
 8001152:	bf00      	nop
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff31 	bl	8000fd0 <__NVIC_EnableIRQ>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ffa2 	bl	80010c8 <SysTick_Config>
 8001184:	4603      	mov	r3, r0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b084      	sub	sp, #16
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800119c:	f7ff feb6 	bl	8000f0c <HAL_GetTick>
 80011a0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d008      	beq.n	80011c0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2280      	movs	r2, #128	; 0x80
 80011b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e052      	b.n	8001266 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f022 0216 	bic.w	r2, r2, #22
 80011ce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	695a      	ldr	r2, [r3, #20]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011de:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d103      	bne.n	80011f0 <HAL_DMA_Abort+0x62>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d007      	beq.n	8001200 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f022 0208 	bic.w	r2, r2, #8
 80011fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f022 0201 	bic.w	r2, r2, #1
 800120e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001210:	e013      	b.n	800123a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001212:	f7ff fe7b 	bl	8000f0c <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b05      	cmp	r3, #5
 800121e:	d90c      	bls.n	800123a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2220      	movs	r2, #32
 8001224:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2203      	movs	r2, #3
 800122a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e015      	b.n	8001266 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1e4      	bne.n	8001212 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800124c:	223f      	movs	r2, #63	; 0x3f
 800124e:	409a      	lsls	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2201      	movs	r2, #1
 8001258:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d004      	beq.n	800128c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2280      	movs	r2, #128	; 0x80
 8001286:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e00c      	b.n	80012a6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2205      	movs	r2, #5
 8001290:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f022 0201 	bic.w	r2, r2, #1
 80012a2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
	...

080012b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b089      	sub	sp, #36	; 0x24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
 80012ce:	e165      	b.n	800159c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012d0:	2201      	movs	r2, #1
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	f040 8154 	bne.w	8001596 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f003 0303 	and.w	r3, r3, #3
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d005      	beq.n	8001306 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001302:	2b02      	cmp	r3, #2
 8001304:	d130      	bne.n	8001368 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	2203      	movs	r2, #3
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	68da      	ldr	r2, [r3, #12]
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4313      	orrs	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800133c:	2201      	movs	r2, #1
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4013      	ands	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	091b      	lsrs	r3, r3, #4
 8001352:	f003 0201 	and.w	r2, r3, #1
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4313      	orrs	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 0303 	and.w	r3, r3, #3
 8001370:	2b03      	cmp	r3, #3
 8001372:	d017      	beq.n	80013a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	2203      	movs	r2, #3
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4313      	orrs	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 0303 	and.w	r3, r3, #3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d123      	bne.n	80013f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	08da      	lsrs	r2, r3, #3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3208      	adds	r2, #8
 80013b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	f003 0307 	and.w	r3, r3, #7
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	220f      	movs	r2, #15
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	691a      	ldr	r2, [r3, #16]
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	08da      	lsrs	r2, r3, #3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	3208      	adds	r2, #8
 80013f2:	69b9      	ldr	r1, [r7, #24]
 80013f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	2203      	movs	r2, #3
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 0203 	and.w	r2, r3, #3
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001434:	2b00      	cmp	r3, #0
 8001436:	f000 80ae 	beq.w	8001596 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	4b5d      	ldr	r3, [pc, #372]	; (80015b4 <HAL_GPIO_Init+0x300>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	4a5c      	ldr	r2, [pc, #368]	; (80015b4 <HAL_GPIO_Init+0x300>)
 8001444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001448:	6453      	str	r3, [r2, #68]	; 0x44
 800144a:	4b5a      	ldr	r3, [pc, #360]	; (80015b4 <HAL_GPIO_Init+0x300>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001456:	4a58      	ldr	r2, [pc, #352]	; (80015b8 <HAL_GPIO_Init+0x304>)
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	089b      	lsrs	r3, r3, #2
 800145c:	3302      	adds	r3, #2
 800145e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	f003 0303 	and.w	r3, r3, #3
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	220f      	movs	r2, #15
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a4f      	ldr	r2, [pc, #316]	; (80015bc <HAL_GPIO_Init+0x308>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d025      	beq.n	80014ce <HAL_GPIO_Init+0x21a>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a4e      	ldr	r2, [pc, #312]	; (80015c0 <HAL_GPIO_Init+0x30c>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d01f      	beq.n	80014ca <HAL_GPIO_Init+0x216>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a4d      	ldr	r2, [pc, #308]	; (80015c4 <HAL_GPIO_Init+0x310>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d019      	beq.n	80014c6 <HAL_GPIO_Init+0x212>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a4c      	ldr	r2, [pc, #304]	; (80015c8 <HAL_GPIO_Init+0x314>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d013      	beq.n	80014c2 <HAL_GPIO_Init+0x20e>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a4b      	ldr	r2, [pc, #300]	; (80015cc <HAL_GPIO_Init+0x318>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d00d      	beq.n	80014be <HAL_GPIO_Init+0x20a>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a4a      	ldr	r2, [pc, #296]	; (80015d0 <HAL_GPIO_Init+0x31c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d007      	beq.n	80014ba <HAL_GPIO_Init+0x206>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a49      	ldr	r2, [pc, #292]	; (80015d4 <HAL_GPIO_Init+0x320>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d101      	bne.n	80014b6 <HAL_GPIO_Init+0x202>
 80014b2:	2306      	movs	r3, #6
 80014b4:	e00c      	b.n	80014d0 <HAL_GPIO_Init+0x21c>
 80014b6:	2307      	movs	r3, #7
 80014b8:	e00a      	b.n	80014d0 <HAL_GPIO_Init+0x21c>
 80014ba:	2305      	movs	r3, #5
 80014bc:	e008      	b.n	80014d0 <HAL_GPIO_Init+0x21c>
 80014be:	2304      	movs	r3, #4
 80014c0:	e006      	b.n	80014d0 <HAL_GPIO_Init+0x21c>
 80014c2:	2303      	movs	r3, #3
 80014c4:	e004      	b.n	80014d0 <HAL_GPIO_Init+0x21c>
 80014c6:	2302      	movs	r3, #2
 80014c8:	e002      	b.n	80014d0 <HAL_GPIO_Init+0x21c>
 80014ca:	2301      	movs	r3, #1
 80014cc:	e000      	b.n	80014d0 <HAL_GPIO_Init+0x21c>
 80014ce:	2300      	movs	r3, #0
 80014d0:	69fa      	ldr	r2, [r7, #28]
 80014d2:	f002 0203 	and.w	r2, r2, #3
 80014d6:	0092      	lsls	r2, r2, #2
 80014d8:	4093      	lsls	r3, r2
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014e0:	4935      	ldr	r1, [pc, #212]	; (80015b8 <HAL_GPIO_Init+0x304>)
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	089b      	lsrs	r3, r3, #2
 80014e6:	3302      	adds	r3, #2
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014ee:	4b3a      	ldr	r3, [pc, #232]	; (80015d8 <HAL_GPIO_Init+0x324>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	43db      	mvns	r3, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4013      	ands	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001512:	4a31      	ldr	r2, [pc, #196]	; (80015d8 <HAL_GPIO_Init+0x324>)
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001518:	4b2f      	ldr	r3, [pc, #188]	; (80015d8 <HAL_GPIO_Init+0x324>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	4313      	orrs	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800153c:	4a26      	ldr	r2, [pc, #152]	; (80015d8 <HAL_GPIO_Init+0x324>)
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001542:	4b25      	ldr	r3, [pc, #148]	; (80015d8 <HAL_GPIO_Init+0x324>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	43db      	mvns	r3, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4013      	ands	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001566:	4a1c      	ldr	r2, [pc, #112]	; (80015d8 <HAL_GPIO_Init+0x324>)
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800156c:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <HAL_GPIO_Init+0x324>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	43db      	mvns	r3, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4013      	ands	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001590:	4a11      	ldr	r2, [pc, #68]	; (80015d8 <HAL_GPIO_Init+0x324>)
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3301      	adds	r3, #1
 800159a:	61fb      	str	r3, [r7, #28]
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	2b0f      	cmp	r3, #15
 80015a0:	f67f ae96 	bls.w	80012d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015a4:	bf00      	nop
 80015a6:	bf00      	nop
 80015a8:	3724      	adds	r7, #36	; 0x24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40013800 	.word	0x40013800
 80015bc:	40020000 	.word	0x40020000
 80015c0:	40020400 	.word	0x40020400
 80015c4:	40020800 	.word	0x40020800
 80015c8:	40020c00 	.word	0x40020c00
 80015cc:	40021000 	.word	0x40021000
 80015d0:	40021400 	.word	0x40021400
 80015d4:	40021800 	.word	0x40021800
 80015d8:	40013c00 	.word	0x40013c00

080015dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	807b      	strh	r3, [r7, #2]
 80015e8:	4613      	mov	r3, r2
 80015ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015ec:	787b      	ldrb	r3, [r7, #1]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015f2:	887a      	ldrh	r2, [r7, #2]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015f8:	e003      	b.n	8001602 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015fa:	887b      	ldrh	r3, [r7, #2]
 80015fc:	041a      	lsls	r2, r3, #16
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	619a      	str	r2, [r3, #24]
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800160e:	b480      	push	{r7}
 8001610:	b085      	sub	sp, #20
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	460b      	mov	r3, r1
 8001618:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001620:	887a      	ldrh	r2, [r7, #2]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	4013      	ands	r3, r2
 8001626:	041a      	lsls	r2, r3, #16
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	43d9      	mvns	r1, r3
 800162c:	887b      	ldrh	r3, [r7, #2]
 800162e:	400b      	ands	r3, r1
 8001630:	431a      	orrs	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	619a      	str	r2, [r3, #24]
}
 8001636:	bf00      	nop
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e0cc      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001658:	4b68      	ldr	r3, [pc, #416]	; (80017fc <HAL_RCC_ClockConfig+0x1b8>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 030f 	and.w	r3, r3, #15
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	429a      	cmp	r2, r3
 8001664:	d90c      	bls.n	8001680 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001666:	4b65      	ldr	r3, [pc, #404]	; (80017fc <HAL_RCC_ClockConfig+0x1b8>)
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	b2d2      	uxtb	r2, r2
 800166c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800166e:	4b63      	ldr	r3, [pc, #396]	; (80017fc <HAL_RCC_ClockConfig+0x1b8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	683a      	ldr	r2, [r7, #0]
 8001678:	429a      	cmp	r2, r3
 800167a:	d001      	beq.n	8001680 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e0b8      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d020      	beq.n	80016ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	2b00      	cmp	r3, #0
 8001696:	d005      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001698:	4b59      	ldr	r3, [pc, #356]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	4a58      	ldr	r2, [pc, #352]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 800169e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0308 	and.w	r3, r3, #8
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d005      	beq.n	80016bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016b0:	4b53      	ldr	r3, [pc, #332]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	4a52      	ldr	r2, [pc, #328]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016bc:	4b50      	ldr	r3, [pc, #320]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	494d      	ldr	r1, [pc, #308]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d044      	beq.n	8001764 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d107      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e2:	4b47      	ldr	r3, [pc, #284]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d119      	bne.n	8001722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e07f      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d003      	beq.n	8001702 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016fe:	2b03      	cmp	r3, #3
 8001700:	d107      	bne.n	8001712 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001702:	4b3f      	ldr	r3, [pc, #252]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d109      	bne.n	8001722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e06f      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001712:	4b3b      	ldr	r3, [pc, #236]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e067      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001722:	4b37      	ldr	r3, [pc, #220]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f023 0203 	bic.w	r2, r3, #3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	4934      	ldr	r1, [pc, #208]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 8001730:	4313      	orrs	r3, r2
 8001732:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001734:	f7ff fbea 	bl	8000f0c <HAL_GetTick>
 8001738:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800173a:	e00a      	b.n	8001752 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800173c:	f7ff fbe6 	bl	8000f0c <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	f241 3288 	movw	r2, #5000	; 0x1388
 800174a:	4293      	cmp	r3, r2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e04f      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001752:	4b2b      	ldr	r3, [pc, #172]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 020c 	and.w	r2, r3, #12
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	429a      	cmp	r2, r3
 8001762:	d1eb      	bne.n	800173c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001764:	4b25      	ldr	r3, [pc, #148]	; (80017fc <HAL_RCC_ClockConfig+0x1b8>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 030f 	and.w	r3, r3, #15
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	429a      	cmp	r2, r3
 8001770:	d20c      	bcs.n	800178c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001772:	4b22      	ldr	r3, [pc, #136]	; (80017fc <HAL_RCC_ClockConfig+0x1b8>)
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800177a:	4b20      	ldr	r3, [pc, #128]	; (80017fc <HAL_RCC_ClockConfig+0x1b8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	429a      	cmp	r2, r3
 8001786:	d001      	beq.n	800178c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e032      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b00      	cmp	r3, #0
 8001796:	d008      	beq.n	80017aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001798:	4b19      	ldr	r3, [pc, #100]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	4916      	ldr	r1, [pc, #88]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d009      	beq.n	80017ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017b6:	4b12      	ldr	r3, [pc, #72]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	490e      	ldr	r1, [pc, #56]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017ca:	f000 f855 	bl	8001878 <HAL_RCC_GetSysClockFreq>
 80017ce:	4602      	mov	r2, r0
 80017d0:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	091b      	lsrs	r3, r3, #4
 80017d6:	f003 030f 	and.w	r3, r3, #15
 80017da:	490a      	ldr	r1, [pc, #40]	; (8001804 <HAL_RCC_ClockConfig+0x1c0>)
 80017dc:	5ccb      	ldrb	r3, [r1, r3]
 80017de:	fa22 f303 	lsr.w	r3, r2, r3
 80017e2:	4a09      	ldr	r2, [pc, #36]	; (8001808 <HAL_RCC_ClockConfig+0x1c4>)
 80017e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <HAL_RCC_ClockConfig+0x1c8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fb4a 	bl	8000e84 <HAL_InitTick>

  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40023c00 	.word	0x40023c00
 8001800:	40023800 	.word	0x40023800
 8001804:	08003144 	.word	0x08003144
 8001808:	20000050 	.word	0x20000050
 800180c:	20000054 	.word	0x20000054

08001810 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <HAL_RCC_GetHCLKFreq+0x14>)
 8001816:	681b      	ldr	r3, [r3, #0]
}
 8001818:	4618      	mov	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	20000050 	.word	0x20000050

08001828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800182c:	f7ff fff0 	bl	8001810 <HAL_RCC_GetHCLKFreq>
 8001830:	4602      	mov	r2, r0
 8001832:	4b05      	ldr	r3, [pc, #20]	; (8001848 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	0a9b      	lsrs	r3, r3, #10
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	4903      	ldr	r1, [pc, #12]	; (800184c <HAL_RCC_GetPCLK1Freq+0x24>)
 800183e:	5ccb      	ldrb	r3, [r1, r3]
 8001840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001844:	4618      	mov	r0, r3
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40023800 	.word	0x40023800
 800184c:	08003154 	.word	0x08003154

08001850 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001854:	f7ff ffdc 	bl	8001810 <HAL_RCC_GetHCLKFreq>
 8001858:	4602      	mov	r2, r0
 800185a:	4b05      	ldr	r3, [pc, #20]	; (8001870 <HAL_RCC_GetPCLK2Freq+0x20>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	0b5b      	lsrs	r3, r3, #13
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	4903      	ldr	r1, [pc, #12]	; (8001874 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001866:	5ccb      	ldrb	r3, [r1, r3]
 8001868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800186c:	4618      	mov	r0, r3
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40023800 	.word	0x40023800
 8001874:	08003154 	.word	0x08003154

08001878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800187c:	b088      	sub	sp, #32
 800187e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001888:	2300      	movs	r3, #0
 800188a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800188c:	2300      	movs	r3, #0
 800188e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001890:	2300      	movs	r3, #0
 8001892:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001894:	4bce      	ldr	r3, [pc, #824]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f003 030c 	and.w	r3, r3, #12
 800189c:	2b0c      	cmp	r3, #12
 800189e:	f200 818d 	bhi.w	8001bbc <HAL_RCC_GetSysClockFreq+0x344>
 80018a2:	a201      	add	r2, pc, #4	; (adr r2, 80018a8 <HAL_RCC_GetSysClockFreq+0x30>)
 80018a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a8:	080018dd 	.word	0x080018dd
 80018ac:	08001bbd 	.word	0x08001bbd
 80018b0:	08001bbd 	.word	0x08001bbd
 80018b4:	08001bbd 	.word	0x08001bbd
 80018b8:	080018e3 	.word	0x080018e3
 80018bc:	08001bbd 	.word	0x08001bbd
 80018c0:	08001bbd 	.word	0x08001bbd
 80018c4:	08001bbd 	.word	0x08001bbd
 80018c8:	080018e9 	.word	0x080018e9
 80018cc:	08001bbd 	.word	0x08001bbd
 80018d0:	08001bbd 	.word	0x08001bbd
 80018d4:	08001bbd 	.word	0x08001bbd
 80018d8:	08001a5d 	.word	0x08001a5d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018dc:	4bbd      	ldr	r3, [pc, #756]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80018de:	61bb      	str	r3, [r7, #24]
       break;
 80018e0:	e16f      	b.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018e2:	4bbd      	ldr	r3, [pc, #756]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x360>)
 80018e4:	61bb      	str	r3, [r7, #24]
      break;
 80018e6:	e16c      	b.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018e8:	4bb9      	ldr	r3, [pc, #740]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x358>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018f0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018f2:	4bb7      	ldr	r3, [pc, #732]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x358>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d053      	beq.n	80019a6 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018fe:	4bb4      	ldr	r3, [pc, #720]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	099b      	lsrs	r3, r3, #6
 8001904:	461a      	mov	r2, r3
 8001906:	f04f 0300 	mov.w	r3, #0
 800190a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800190e:	f04f 0100 	mov.w	r1, #0
 8001912:	ea02 0400 	and.w	r4, r2, r0
 8001916:	603c      	str	r4, [r7, #0]
 8001918:	400b      	ands	r3, r1
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001920:	4620      	mov	r0, r4
 8001922:	4629      	mov	r1, r5
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	f04f 0300 	mov.w	r3, #0
 800192c:	014b      	lsls	r3, r1, #5
 800192e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001932:	0142      	lsls	r2, r0, #5
 8001934:	4610      	mov	r0, r2
 8001936:	4619      	mov	r1, r3
 8001938:	4623      	mov	r3, r4
 800193a:	1ac0      	subs	r0, r0, r3
 800193c:	462b      	mov	r3, r5
 800193e:	eb61 0103 	sbc.w	r1, r1, r3
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	018b      	lsls	r3, r1, #6
 800194c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001950:	0182      	lsls	r2, r0, #6
 8001952:	1a12      	subs	r2, r2, r0
 8001954:	eb63 0301 	sbc.w	r3, r3, r1
 8001958:	f04f 0000 	mov.w	r0, #0
 800195c:	f04f 0100 	mov.w	r1, #0
 8001960:	00d9      	lsls	r1, r3, #3
 8001962:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001966:	00d0      	lsls	r0, r2, #3
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4621      	mov	r1, r4
 800196e:	1852      	adds	r2, r2, r1
 8001970:	4629      	mov	r1, r5
 8001972:	eb43 0101 	adc.w	r1, r3, r1
 8001976:	460b      	mov	r3, r1
 8001978:	f04f 0000 	mov.w	r0, #0
 800197c:	f04f 0100 	mov.w	r1, #0
 8001980:	0259      	lsls	r1, r3, #9
 8001982:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001986:	0250      	lsls	r0, r2, #9
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4610      	mov	r0, r2
 800198e:	4619      	mov	r1, r3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	461a      	mov	r2, r3
 8001994:	f04f 0300 	mov.w	r3, #0
 8001998:	f7fe fe50 	bl	800063c <__aeabi_uldivmod>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4613      	mov	r3, r2
 80019a2:	61fb      	str	r3, [r7, #28]
 80019a4:	e04c      	b.n	8001a40 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019a6:	4b8a      	ldr	r3, [pc, #552]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x358>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	099b      	lsrs	r3, r3, #6
 80019ac:	461a      	mov	r2, r3
 80019ae:	f04f 0300 	mov.w	r3, #0
 80019b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019b6:	f04f 0100 	mov.w	r1, #0
 80019ba:	ea02 0a00 	and.w	sl, r2, r0
 80019be:	ea03 0b01 	and.w	fp, r3, r1
 80019c2:	4650      	mov	r0, sl
 80019c4:	4659      	mov	r1, fp
 80019c6:	f04f 0200 	mov.w	r2, #0
 80019ca:	f04f 0300 	mov.w	r3, #0
 80019ce:	014b      	lsls	r3, r1, #5
 80019d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019d4:	0142      	lsls	r2, r0, #5
 80019d6:	4610      	mov	r0, r2
 80019d8:	4619      	mov	r1, r3
 80019da:	ebb0 000a 	subs.w	r0, r0, sl
 80019de:	eb61 010b 	sbc.w	r1, r1, fp
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	018b      	lsls	r3, r1, #6
 80019ec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019f0:	0182      	lsls	r2, r0, #6
 80019f2:	1a12      	subs	r2, r2, r0
 80019f4:	eb63 0301 	sbc.w	r3, r3, r1
 80019f8:	f04f 0000 	mov.w	r0, #0
 80019fc:	f04f 0100 	mov.w	r1, #0
 8001a00:	00d9      	lsls	r1, r3, #3
 8001a02:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a06:	00d0      	lsls	r0, r2, #3
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	eb12 020a 	adds.w	r2, r2, sl
 8001a10:	eb43 030b 	adc.w	r3, r3, fp
 8001a14:	f04f 0000 	mov.w	r0, #0
 8001a18:	f04f 0100 	mov.w	r1, #0
 8001a1c:	0299      	lsls	r1, r3, #10
 8001a1e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a22:	0290      	lsls	r0, r2, #10
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4610      	mov	r0, r2
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	f04f 0300 	mov.w	r3, #0
 8001a34:	f7fe fe02 	bl	800063c <__aeabi_uldivmod>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a40:	4b63      	ldr	r3, [pc, #396]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	0c1b      	lsrs	r3, r3, #16
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001a50:	69fa      	ldr	r2, [r7, #28]
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a58:	61bb      	str	r3, [r7, #24]
      break;
 8001a5a:	e0b2      	b.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a5c:	4b5c      	ldr	r3, [pc, #368]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a64:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a66:	4b5a      	ldr	r3, [pc, #360]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d04d      	beq.n	8001b0e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a72:	4b57      	ldr	r3, [pc, #348]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	099b      	lsrs	r3, r3, #6
 8001a78:	461a      	mov	r2, r3
 8001a7a:	f04f 0300 	mov.w	r3, #0
 8001a7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a82:	f04f 0100 	mov.w	r1, #0
 8001a86:	ea02 0800 	and.w	r8, r2, r0
 8001a8a:	ea03 0901 	and.w	r9, r3, r1
 8001a8e:	4640      	mov	r0, r8
 8001a90:	4649      	mov	r1, r9
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	f04f 0300 	mov.w	r3, #0
 8001a9a:	014b      	lsls	r3, r1, #5
 8001a9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001aa0:	0142      	lsls	r2, r0, #5
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	ebb0 0008 	subs.w	r0, r0, r8
 8001aaa:	eb61 0109 	sbc.w	r1, r1, r9
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	018b      	lsls	r3, r1, #6
 8001ab8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001abc:	0182      	lsls	r2, r0, #6
 8001abe:	1a12      	subs	r2, r2, r0
 8001ac0:	eb63 0301 	sbc.w	r3, r3, r1
 8001ac4:	f04f 0000 	mov.w	r0, #0
 8001ac8:	f04f 0100 	mov.w	r1, #0
 8001acc:	00d9      	lsls	r1, r3, #3
 8001ace:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ad2:	00d0      	lsls	r0, r2, #3
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	eb12 0208 	adds.w	r2, r2, r8
 8001adc:	eb43 0309 	adc.w	r3, r3, r9
 8001ae0:	f04f 0000 	mov.w	r0, #0
 8001ae4:	f04f 0100 	mov.w	r1, #0
 8001ae8:	0259      	lsls	r1, r3, #9
 8001aea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001aee:	0250      	lsls	r0, r2, #9
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	461a      	mov	r2, r3
 8001afc:	f04f 0300 	mov.w	r3, #0
 8001b00:	f7fe fd9c 	bl	800063c <__aeabi_uldivmod>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4613      	mov	r3, r2
 8001b0a:	61fb      	str	r3, [r7, #28]
 8001b0c:	e04a      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b0e:	4b30      	ldr	r3, [pc, #192]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	099b      	lsrs	r3, r3, #6
 8001b14:	461a      	mov	r2, r3
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b1e:	f04f 0100 	mov.w	r1, #0
 8001b22:	ea02 0400 	and.w	r4, r2, r0
 8001b26:	ea03 0501 	and.w	r5, r3, r1
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	4629      	mov	r1, r5
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	f04f 0300 	mov.w	r3, #0
 8001b36:	014b      	lsls	r3, r1, #5
 8001b38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b3c:	0142      	lsls	r2, r0, #5
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4619      	mov	r1, r3
 8001b42:	1b00      	subs	r0, r0, r4
 8001b44:	eb61 0105 	sbc.w	r1, r1, r5
 8001b48:	f04f 0200 	mov.w	r2, #0
 8001b4c:	f04f 0300 	mov.w	r3, #0
 8001b50:	018b      	lsls	r3, r1, #6
 8001b52:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b56:	0182      	lsls	r2, r0, #6
 8001b58:	1a12      	subs	r2, r2, r0
 8001b5a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b5e:	f04f 0000 	mov.w	r0, #0
 8001b62:	f04f 0100 	mov.w	r1, #0
 8001b66:	00d9      	lsls	r1, r3, #3
 8001b68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b6c:	00d0      	lsls	r0, r2, #3
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	1912      	adds	r2, r2, r4
 8001b74:	eb45 0303 	adc.w	r3, r5, r3
 8001b78:	f04f 0000 	mov.w	r0, #0
 8001b7c:	f04f 0100 	mov.w	r1, #0
 8001b80:	0299      	lsls	r1, r3, #10
 8001b82:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001b86:	0290      	lsls	r0, r2, #10
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	461a      	mov	r2, r3
 8001b94:	f04f 0300 	mov.w	r3, #0
 8001b98:	f7fe fd50 	bl	800063c <__aeabi_uldivmod>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	0f1b      	lsrs	r3, r3, #28
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001bb0:	69fa      	ldr	r2, [r7, #28]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb8:	61bb      	str	r3, [r7, #24]
      break;
 8001bba:	e002      	b.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bbc:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001bbe:	61bb      	str	r3, [r7, #24]
      break;
 8001bc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bc2:	69bb      	ldr	r3, [r7, #24]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3720      	adds	r7, #32
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bce:	bf00      	nop
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	00f42400 	.word	0x00f42400
 8001bd8:	007a1200 	.word	0x007a1200

08001bdc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e28d      	b.n	800210a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f000 8083 	beq.w	8001d02 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001bfc:	4b94      	ldr	r3, [pc, #592]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 030c 	and.w	r3, r3, #12
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d019      	beq.n	8001c3c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c08:	4b91      	ldr	r3, [pc, #580]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d106      	bne.n	8001c22 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c14:	4b8e      	ldr	r3, [pc, #568]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c20:	d00c      	beq.n	8001c3c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c22:	4b8b      	ldr	r3, [pc, #556]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c2a:	2b0c      	cmp	r3, #12
 8001c2c:	d112      	bne.n	8001c54 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c2e:	4b88      	ldr	r3, [pc, #544]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c3a:	d10b      	bne.n	8001c54 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c3c:	4b84      	ldr	r3, [pc, #528]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d05b      	beq.n	8001d00 <HAL_RCC_OscConfig+0x124>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d157      	bne.n	8001d00 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e25a      	b.n	800210a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c5c:	d106      	bne.n	8001c6c <HAL_RCC_OscConfig+0x90>
 8001c5e:	4b7c      	ldr	r3, [pc, #496]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a7b      	ldr	r2, [pc, #492]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	e01d      	b.n	8001ca8 <HAL_RCC_OscConfig+0xcc>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c74:	d10c      	bne.n	8001c90 <HAL_RCC_OscConfig+0xb4>
 8001c76:	4b76      	ldr	r3, [pc, #472]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a75      	ldr	r2, [pc, #468]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	4b73      	ldr	r3, [pc, #460]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a72      	ldr	r2, [pc, #456]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	e00b      	b.n	8001ca8 <HAL_RCC_OscConfig+0xcc>
 8001c90:	4b6f      	ldr	r3, [pc, #444]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a6e      	ldr	r2, [pc, #440]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c9a:	6013      	str	r3, [r2, #0]
 8001c9c:	4b6c      	ldr	r3, [pc, #432]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a6b      	ldr	r2, [pc, #428]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ca6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d013      	beq.n	8001cd8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb0:	f7ff f92c 	bl	8000f0c <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb8:	f7ff f928 	bl	8000f0c <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b64      	cmp	r3, #100	; 0x64
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e21f      	b.n	800210a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cca:	4b61      	ldr	r3, [pc, #388]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0f0      	beq.n	8001cb8 <HAL_RCC_OscConfig+0xdc>
 8001cd6:	e014      	b.n	8001d02 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd8:	f7ff f918 	bl	8000f0c <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce0:	f7ff f914 	bl	8000f0c <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b64      	cmp	r3, #100	; 0x64
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e20b      	b.n	800210a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf2:	4b57      	ldr	r3, [pc, #348]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f0      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x104>
 8001cfe:	e000      	b.n	8001d02 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d06f      	beq.n	8001dee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d0e:	4b50      	ldr	r3, [pc, #320]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 030c 	and.w	r3, r3, #12
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d017      	beq.n	8001d4a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d1a:	4b4d      	ldr	r3, [pc, #308]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d22:	2b08      	cmp	r3, #8
 8001d24:	d105      	bne.n	8001d32 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d26:	4b4a      	ldr	r3, [pc, #296]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00b      	beq.n	8001d4a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d32:	4b47      	ldr	r3, [pc, #284]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d3a:	2b0c      	cmp	r3, #12
 8001d3c:	d11c      	bne.n	8001d78 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d3e:	4b44      	ldr	r3, [pc, #272]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d116      	bne.n	8001d78 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d4a:	4b41      	ldr	r3, [pc, #260]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d005      	beq.n	8001d62 <HAL_RCC_OscConfig+0x186>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d001      	beq.n	8001d62 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e1d3      	b.n	800210a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d62:	4b3b      	ldr	r3, [pc, #236]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	4937      	ldr	r1, [pc, #220]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d76:	e03a      	b.n	8001dee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d020      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d80:	4b34      	ldr	r3, [pc, #208]	; (8001e54 <HAL_RCC_OscConfig+0x278>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d86:	f7ff f8c1 	bl	8000f0c <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d8e:	f7ff f8bd 	bl	8000f0c <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e1b4      	b.n	800210a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da0:	4b2b      	ldr	r3, [pc, #172]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0f0      	beq.n	8001d8e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dac:	4b28      	ldr	r3, [pc, #160]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	4925      	ldr	r1, [pc, #148]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	600b      	str	r3, [r1, #0]
 8001dc0:	e015      	b.n	8001dee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dc2:	4b24      	ldr	r3, [pc, #144]	; (8001e54 <HAL_RCC_OscConfig+0x278>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc8:	f7ff f8a0 	bl	8000f0c <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dd0:	f7ff f89c 	bl	8000f0c <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e193      	b.n	800210a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de2:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f0      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0308 	and.w	r3, r3, #8
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d036      	beq.n	8001e68 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d016      	beq.n	8001e30 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e02:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <HAL_RCC_OscConfig+0x27c>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e08:	f7ff f880 	bl	8000f0c <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e10:	f7ff f87c 	bl	8000f0c <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e173      	b.n	800210a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e22:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0x234>
 8001e2e:	e01b      	b.n	8001e68 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e30:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <HAL_RCC_OscConfig+0x27c>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e36:	f7ff f869 	bl	8000f0c <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e3c:	e00e      	b.n	8001e5c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e3e:	f7ff f865 	bl	8000f0c <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d907      	bls.n	8001e5c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e15c      	b.n	800210a <HAL_RCC_OscConfig+0x52e>
 8001e50:	40023800 	.word	0x40023800
 8001e54:	42470000 	.word	0x42470000
 8001e58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e5c:	4b8a      	ldr	r3, [pc, #552]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1ea      	bne.n	8001e3e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 8097 	beq.w	8001fa4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e76:	2300      	movs	r3, #0
 8001e78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e7a:	4b83      	ldr	r3, [pc, #524]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10f      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	4b7f      	ldr	r3, [pc, #508]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	4a7e      	ldr	r2, [pc, #504]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e94:	6413      	str	r3, [r2, #64]	; 0x40
 8001e96:	4b7c      	ldr	r3, [pc, #496]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea6:	4b79      	ldr	r3, [pc, #484]	; (800208c <HAL_RCC_OscConfig+0x4b0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d118      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eb2:	4b76      	ldr	r3, [pc, #472]	; (800208c <HAL_RCC_OscConfig+0x4b0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a75      	ldr	r2, [pc, #468]	; (800208c <HAL_RCC_OscConfig+0x4b0>)
 8001eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ebc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ebe:	f7ff f825 	bl	8000f0c <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec6:	f7ff f821 	bl	8000f0c <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e118      	b.n	800210a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed8:	4b6c      	ldr	r3, [pc, #432]	; (800208c <HAL_RCC_OscConfig+0x4b0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0f0      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d106      	bne.n	8001efa <HAL_RCC_OscConfig+0x31e>
 8001eec:	4b66      	ldr	r3, [pc, #408]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef0:	4a65      	ldr	r2, [pc, #404]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ef8:	e01c      	b.n	8001f34 <HAL_RCC_OscConfig+0x358>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	2b05      	cmp	r3, #5
 8001f00:	d10c      	bne.n	8001f1c <HAL_RCC_OscConfig+0x340>
 8001f02:	4b61      	ldr	r3, [pc, #388]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f06:	4a60      	ldr	r2, [pc, #384]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001f08:	f043 0304 	orr.w	r3, r3, #4
 8001f0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f0e:	4b5e      	ldr	r3, [pc, #376]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f12:	4a5d      	ldr	r2, [pc, #372]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	6713      	str	r3, [r2, #112]	; 0x70
 8001f1a:	e00b      	b.n	8001f34 <HAL_RCC_OscConfig+0x358>
 8001f1c:	4b5a      	ldr	r3, [pc, #360]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f20:	4a59      	ldr	r2, [pc, #356]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001f22:	f023 0301 	bic.w	r3, r3, #1
 8001f26:	6713      	str	r3, [r2, #112]	; 0x70
 8001f28:	4b57      	ldr	r3, [pc, #348]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2c:	4a56      	ldr	r2, [pc, #344]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001f2e:	f023 0304 	bic.w	r3, r3, #4
 8001f32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d015      	beq.n	8001f68 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f3c:	f7fe ffe6 	bl	8000f0c <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f42:	e00a      	b.n	8001f5a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f44:	f7fe ffe2 	bl	8000f0c <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e0d7      	b.n	800210a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f5a:	4b4b      	ldr	r3, [pc, #300]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0ee      	beq.n	8001f44 <HAL_RCC_OscConfig+0x368>
 8001f66:	e014      	b.n	8001f92 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f68:	f7fe ffd0 	bl	8000f0c <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f6e:	e00a      	b.n	8001f86 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f70:	f7fe ffcc 	bl	8000f0c <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e0c1      	b.n	800210a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f86:	4b40      	ldr	r3, [pc, #256]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1ee      	bne.n	8001f70 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f92:	7dfb      	ldrb	r3, [r7, #23]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d105      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f98:	4b3b      	ldr	r3, [pc, #236]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	4a3a      	ldr	r2, [pc, #232]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001f9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 80ad 	beq.w	8002108 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fae:	4b36      	ldr	r3, [pc, #216]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d060      	beq.n	800207c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d145      	bne.n	800204e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc2:	4b33      	ldr	r3, [pc, #204]	; (8002090 <HAL_RCC_OscConfig+0x4b4>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc8:	f7fe ffa0 	bl	8000f0c <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fd0:	f7fe ff9c 	bl	8000f0c <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e093      	b.n	800210a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fe2:	4b29      	ldr	r3, [pc, #164]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f0      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69da      	ldr	r2, [r3, #28]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	019b      	lsls	r3, r3, #6
 8001ffe:	431a      	orrs	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002004:	085b      	lsrs	r3, r3, #1
 8002006:	3b01      	subs	r3, #1
 8002008:	041b      	lsls	r3, r3, #16
 800200a:	431a      	orrs	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002010:	061b      	lsls	r3, r3, #24
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002018:	071b      	lsls	r3, r3, #28
 800201a:	491b      	ldr	r1, [pc, #108]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 800201c:	4313      	orrs	r3, r2
 800201e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002020:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <HAL_RCC_OscConfig+0x4b4>)
 8002022:	2201      	movs	r2, #1
 8002024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002026:	f7fe ff71 	bl	8000f0c <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800202e:	f7fe ff6d 	bl	8000f0c <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e064      	b.n	800210a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002040:	4b11      	ldr	r3, [pc, #68]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0f0      	beq.n	800202e <HAL_RCC_OscConfig+0x452>
 800204c:	e05c      	b.n	8002108 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800204e:	4b10      	ldr	r3, [pc, #64]	; (8002090 <HAL_RCC_OscConfig+0x4b4>)
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002054:	f7fe ff5a 	bl	8000f0c <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800205c:	f7fe ff56 	bl	8000f0c <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e04d      	b.n	800210a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800206e:	4b06      	ldr	r3, [pc, #24]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x480>
 800207a:	e045      	b.n	8002108 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d107      	bne.n	8002094 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e040      	b.n	800210a <HAL_RCC_OscConfig+0x52e>
 8002088:	40023800 	.word	0x40023800
 800208c:	40007000 	.word	0x40007000
 8002090:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002094:	4b1f      	ldr	r3, [pc, #124]	; (8002114 <HAL_RCC_OscConfig+0x538>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d030      	beq.n	8002104 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d129      	bne.n	8002104 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d122      	bne.n	8002104 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020c4:	4013      	ands	r3, r2
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d119      	bne.n	8002104 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020da:	085b      	lsrs	r3, r3, #1
 80020dc:	3b01      	subs	r3, #1
 80020de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d10f      	bne.n	8002104 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d107      	bne.n	8002104 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002100:	429a      	cmp	r2, r3
 8002102:	d001      	beq.n	8002108 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e000      	b.n	800210a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40023800 	.word	0x40023800

08002118 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e03f      	b.n	80021aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d106      	bne.n	8002144 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7fe fdbe 	bl	8000cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2224      	movs	r2, #36	; 0x24
 8002148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68da      	ldr	r2, [r3, #12]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800215a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 fe1d 	bl	8002d9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	691a      	ldr	r2, [r3, #16]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002170:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	695a      	ldr	r2, [r3, #20]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002180:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68da      	ldr	r2, [r3, #12]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002190:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2220      	movs	r2, #32
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2220      	movs	r2, #32
 80021a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b08a      	sub	sp, #40	; 0x28
 80021b6:	af02      	add	r7, sp, #8
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	603b      	str	r3, [r7, #0]
 80021be:	4613      	mov	r3, r2
 80021c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b20      	cmp	r3, #32
 80021d0:	d17c      	bne.n	80022cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d002      	beq.n	80021de <HAL_UART_Transmit+0x2c>
 80021d8:	88fb      	ldrh	r3, [r7, #6]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e075      	b.n	80022ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d101      	bne.n	80021f0 <HAL_UART_Transmit+0x3e>
 80021ec:	2302      	movs	r3, #2
 80021ee:	e06e      	b.n	80022ce <HAL_UART_Transmit+0x11c>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2221      	movs	r2, #33	; 0x21
 8002202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002206:	f7fe fe81 	bl	8000f0c <HAL_GetTick>
 800220a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	88fa      	ldrh	r2, [r7, #6]
 8002210:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	88fa      	ldrh	r2, [r7, #6]
 8002216:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002220:	d108      	bne.n	8002234 <HAL_UART_Transmit+0x82>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d104      	bne.n	8002234 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	61bb      	str	r3, [r7, #24]
 8002232:	e003      	b.n	800223c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002238:	2300      	movs	r3, #0
 800223a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002244:	e02a      	b.n	800229c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	2200      	movs	r2, #0
 800224e:	2180      	movs	r1, #128	; 0x80
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 fb9b 	bl	800298c <UART_WaitOnFlagUntilTimeout>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e036      	b.n	80022ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10b      	bne.n	800227e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	461a      	mov	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002274:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	3302      	adds	r3, #2
 800227a:	61bb      	str	r3, [r7, #24]
 800227c:	e007      	b.n	800228e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	781a      	ldrb	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	3301      	adds	r3, #1
 800228c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002292:	b29b      	uxth	r3, r3
 8002294:	3b01      	subs	r3, #1
 8002296:	b29a      	uxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1cf      	bne.n	8002246 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	2200      	movs	r2, #0
 80022ae:	2140      	movs	r1, #64	; 0x40
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f000 fb6b 	bl	800298c <UART_WaitOnFlagUntilTimeout>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e006      	b.n	80022ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2220      	movs	r2, #32
 80022c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	e000      	b.n	80022ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80022cc:	2302      	movs	r3, #2
  }
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3720      	adds	r7, #32
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b08a      	sub	sp, #40	; 0x28
 80022da:	af02      	add	r7, sp, #8
 80022dc:	60f8      	str	r0, [r7, #12]
 80022de:	60b9      	str	r1, [r7, #8]
 80022e0:	603b      	str	r3, [r7, #0]
 80022e2:	4613      	mov	r3, r2
 80022e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b20      	cmp	r3, #32
 80022f4:	f040 808c 	bne.w	8002410 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d002      	beq.n	8002304 <HAL_UART_Receive+0x2e>
 80022fe:	88fb      	ldrh	r3, [r7, #6]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e084      	b.n	8002412 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800230e:	2b01      	cmp	r3, #1
 8002310:	d101      	bne.n	8002316 <HAL_UART_Receive+0x40>
 8002312:	2302      	movs	r3, #2
 8002314:	e07d      	b.n	8002412 <HAL_UART_Receive+0x13c>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2222      	movs	r2, #34	; 0x22
 8002328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002332:	f7fe fdeb 	bl	8000f0c <HAL_GetTick>
 8002336:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	88fa      	ldrh	r2, [r7, #6]
 800233c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	88fa      	ldrh	r2, [r7, #6]
 8002342:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800234c:	d108      	bne.n	8002360 <HAL_UART_Receive+0x8a>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d104      	bne.n	8002360 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	61bb      	str	r3, [r7, #24]
 800235e:	e003      	b.n	8002368 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002364:	2300      	movs	r3, #0
 8002366:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002370:	e043      	b.n	80023fa <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	2200      	movs	r2, #0
 800237a:	2120      	movs	r1, #32
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 fb05 	bl	800298c <UART_WaitOnFlagUntilTimeout>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e042      	b.n	8002412 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10c      	bne.n	80023ac <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	b29b      	uxth	r3, r3
 800239a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800239e:	b29a      	uxth	r2, r3
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	3302      	adds	r3, #2
 80023a8:	61bb      	str	r3, [r7, #24]
 80023aa:	e01f      	b.n	80023ec <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023b4:	d007      	beq.n	80023c6 <HAL_UART_Receive+0xf0>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10a      	bne.n	80023d4 <HAL_UART_Receive+0xfe>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d106      	bne.n	80023d4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	701a      	strb	r2, [r3, #0]
 80023d2:	e008      	b.n	80023e6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	3301      	adds	r3, #1
 80023ea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	3b01      	subs	r3, #1
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023fe:	b29b      	uxth	r3, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1b6      	bne.n	8002372 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2220      	movs	r2, #32
 8002408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	e000      	b.n	8002412 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002410:	2302      	movs	r3, #2
  }
}
 8002412:	4618      	mov	r0, r3
 8002414:	3720      	adds	r7, #32
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b0ba      	sub	sp, #232	; 0xe8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002442:	2300      	movs	r3, #0
 8002444:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002448:	2300      	movs	r3, #0
 800244a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800244e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800245a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10f      	bne.n	8002482 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002466:	f003 0320 	and.w	r3, r3, #32
 800246a:	2b00      	cmp	r3, #0
 800246c:	d009      	beq.n	8002482 <HAL_UART_IRQHandler+0x66>
 800246e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002472:	f003 0320 	and.w	r3, r3, #32
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 fbd3 	bl	8002c26 <UART_Receive_IT>
      return;
 8002480:	e256      	b.n	8002930 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002482:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 80de 	beq.w	8002648 <HAL_UART_IRQHandler+0x22c>
 800248c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b00      	cmp	r3, #0
 8002496:	d106      	bne.n	80024a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800249c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 80d1 	beq.w	8002648 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00b      	beq.n	80024ca <HAL_UART_IRQHandler+0xae>
 80024b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d005      	beq.n	80024ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	f043 0201 	orr.w	r2, r3, #1
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00b      	beq.n	80024ee <HAL_UART_IRQHandler+0xd2>
 80024d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d005      	beq.n	80024ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f043 0202 	orr.w	r2, r3, #2
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00b      	beq.n	8002512 <HAL_UART_IRQHandler+0xf6>
 80024fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d005      	beq.n	8002512 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	f043 0204 	orr.w	r2, r3, #4
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	2b00      	cmp	r3, #0
 800251c:	d011      	beq.n	8002542 <HAL_UART_IRQHandler+0x126>
 800251e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002522:	f003 0320 	and.w	r3, r3, #32
 8002526:	2b00      	cmp	r3, #0
 8002528:	d105      	bne.n	8002536 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800252a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d005      	beq.n	8002542 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	f043 0208 	orr.w	r2, r3, #8
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 81ed 	beq.w	8002926 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800254c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002550:	f003 0320 	and.w	r3, r3, #32
 8002554:	2b00      	cmp	r3, #0
 8002556:	d008      	beq.n	800256a <HAL_UART_IRQHandler+0x14e>
 8002558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800255c:	f003 0320 	and.w	r3, r3, #32
 8002560:	2b00      	cmp	r3, #0
 8002562:	d002      	beq.n	800256a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 fb5e 	bl	8002c26 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002574:	2b40      	cmp	r3, #64	; 0x40
 8002576:	bf0c      	ite	eq
 8002578:	2301      	moveq	r3, #1
 800257a:	2300      	movne	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d103      	bne.n	8002596 <HAL_UART_IRQHandler+0x17a>
 800258e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002592:	2b00      	cmp	r3, #0
 8002594:	d04f      	beq.n	8002636 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 fa66 	bl	8002a68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a6:	2b40      	cmp	r3, #64	; 0x40
 80025a8:	d141      	bne.n	800262e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	3314      	adds	r3, #20
 80025b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025b8:	e853 3f00 	ldrex	r3, [r3]
 80025bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80025c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	3314      	adds	r3, #20
 80025d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80025d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80025da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80025e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80025e6:	e841 2300 	strex	r3, r2, [r1]
 80025ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80025ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1d9      	bne.n	80025aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d013      	beq.n	8002626 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002602:	4a7d      	ldr	r2, [pc, #500]	; (80027f8 <HAL_UART_IRQHandler+0x3dc>)
 8002604:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260a:	4618      	mov	r0, r3
 800260c:	f7fe fe2f 	bl	800126e <HAL_DMA_Abort_IT>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d016      	beq.n	8002644 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002620:	4610      	mov	r0, r2
 8002622:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002624:	e00e      	b.n	8002644 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f99a 	bl	8002960 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800262c:	e00a      	b.n	8002644 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f996 	bl	8002960 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002634:	e006      	b.n	8002644 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f992 	bl	8002960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002642:	e170      	b.n	8002926 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002644:	bf00      	nop
    return;
 8002646:	e16e      	b.n	8002926 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264c:	2b01      	cmp	r3, #1
 800264e:	f040 814a 	bne.w	80028e6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002656:	f003 0310 	and.w	r3, r3, #16
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 8143 	beq.w	80028e6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002664:	f003 0310 	and.w	r3, r3, #16
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 813c 	beq.w	80028e6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800266e:	2300      	movs	r3, #0
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800268e:	2b40      	cmp	r3, #64	; 0x40
 8002690:	f040 80b4 	bne.w	80027fc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80026a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 8140 	beq.w	800292a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80026ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026b2:	429a      	cmp	r2, r3
 80026b4:	f080 8139 	bcs.w	800292a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026ca:	f000 8088 	beq.w	80027de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	330c      	adds	r3, #12
 80026d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026dc:	e853 3f00 	ldrex	r3, [r3]
 80026e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80026e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	330c      	adds	r3, #12
 80026f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80026fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80026fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002702:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002706:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800270a:	e841 2300 	strex	r3, r2, [r1]
 800270e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002712:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1d9      	bne.n	80026ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	3314      	adds	r3, #20
 8002720:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002722:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002724:	e853 3f00 	ldrex	r3, [r3]
 8002728:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800272a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800272c:	f023 0301 	bic.w	r3, r3, #1
 8002730:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	3314      	adds	r3, #20
 800273a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800273e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002742:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002744:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002746:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800274a:	e841 2300 	strex	r3, r2, [r1]
 800274e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002750:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1e1      	bne.n	800271a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	3314      	adds	r3, #20
 800275c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800275e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002760:	e853 3f00 	ldrex	r3, [r3]
 8002764:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002768:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800276c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	3314      	adds	r3, #20
 8002776:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800277a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800277c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800277e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002780:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002782:	e841 2300 	strex	r3, r2, [r1]
 8002786:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002788:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1e3      	bne.n	8002756 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2220      	movs	r2, #32
 8002792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	330c      	adds	r3, #12
 80027a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027a6:	e853 3f00 	ldrex	r3, [r3]
 80027aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80027ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027ae:	f023 0310 	bic.w	r3, r3, #16
 80027b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	330c      	adds	r3, #12
 80027bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80027c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80027c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80027c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027c8:	e841 2300 	strex	r3, r2, [r1]
 80027cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80027ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1e3      	bne.n	800279c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fe fcd8 	bl	800118e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	4619      	mov	r1, r3
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f8c0 	bl	8002974 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027f4:	e099      	b.n	800292a <HAL_UART_IRQHandler+0x50e>
 80027f6:	bf00      	nop
 80027f8:	08002b2f 	.word	0x08002b2f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002804:	b29b      	uxth	r3, r3
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002810:	b29b      	uxth	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 808b 	beq.w	800292e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002818:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 8086 	beq.w	800292e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	330c      	adds	r3, #12
 8002828:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800282a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800282c:	e853 3f00 	ldrex	r3, [r3]
 8002830:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002834:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002838:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	330c      	adds	r3, #12
 8002842:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002846:	647a      	str	r2, [r7, #68]	; 0x44
 8002848:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800284a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800284c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800284e:	e841 2300 	strex	r3, r2, [r1]
 8002852:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1e3      	bne.n	8002822 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	3314      	adds	r3, #20
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	e853 3f00 	ldrex	r3, [r3]
 8002868:	623b      	str	r3, [r7, #32]
   return(result);
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	f023 0301 	bic.w	r3, r3, #1
 8002870:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	3314      	adds	r3, #20
 800287a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800287e:	633a      	str	r2, [r7, #48]	; 0x30
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002882:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002886:	e841 2300 	strex	r3, r2, [r1]
 800288a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800288c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1e3      	bne.n	800285a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2220      	movs	r2, #32
 8002896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	330c      	adds	r3, #12
 80028a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	e853 3f00 	ldrex	r3, [r3]
 80028ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f023 0310 	bic.w	r3, r3, #16
 80028b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	330c      	adds	r3, #12
 80028c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80028c4:	61fa      	str	r2, [r7, #28]
 80028c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c8:	69b9      	ldr	r1, [r7, #24]
 80028ca:	69fa      	ldr	r2, [r7, #28]
 80028cc:	e841 2300 	strex	r3, r2, [r1]
 80028d0:	617b      	str	r3, [r7, #20]
   return(result);
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1e3      	bne.n	80028a0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80028dc:	4619      	mov	r1, r3
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f848 	bl	8002974 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028e4:	e023      	b.n	800292e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80028e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d009      	beq.n	8002906 <HAL_UART_IRQHandler+0x4ea>
 80028f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f929 	bl	8002b56 <UART_Transmit_IT>
    return;
 8002904:	e014      	b.n	8002930 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800290a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00e      	beq.n	8002930 <HAL_UART_IRQHandler+0x514>
 8002912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291a:	2b00      	cmp	r3, #0
 800291c:	d008      	beq.n	8002930 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f969 	bl	8002bf6 <UART_EndTransmit_IT>
    return;
 8002924:	e004      	b.n	8002930 <HAL_UART_IRQHandler+0x514>
    return;
 8002926:	bf00      	nop
 8002928:	e002      	b.n	8002930 <HAL_UART_IRQHandler+0x514>
      return;
 800292a:	bf00      	nop
 800292c:	e000      	b.n	8002930 <HAL_UART_IRQHandler+0x514>
      return;
 800292e:	bf00      	nop
  }
}
 8002930:	37e8      	adds	r7, #232	; 0xe8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop

08002938 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b090      	sub	sp, #64	; 0x40
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	603b      	str	r3, [r7, #0]
 8002998:	4613      	mov	r3, r2
 800299a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800299c:	e050      	b.n	8002a40 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800299e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029a4:	d04c      	beq.n	8002a40 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80029a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d007      	beq.n	80029bc <UART_WaitOnFlagUntilTimeout+0x30>
 80029ac:	f7fe faae 	bl	8000f0c <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d241      	bcs.n	8002a40 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	330c      	adds	r3, #12
 80029c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c6:	e853 3f00 	ldrex	r3, [r3]
 80029ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80029d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	330c      	adds	r3, #12
 80029da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029dc:	637a      	str	r2, [r7, #52]	; 0x34
 80029de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029e4:	e841 2300 	strex	r3, r2, [r1]
 80029e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80029ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1e5      	bne.n	80029bc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	3314      	adds	r3, #20
 80029f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	e853 3f00 	ldrex	r3, [r3]
 80029fe:	613b      	str	r3, [r7, #16]
   return(result);
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	f023 0301 	bic.w	r3, r3, #1
 8002a06:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	3314      	adds	r3, #20
 8002a0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a10:	623a      	str	r2, [r7, #32]
 8002a12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a14:	69f9      	ldr	r1, [r7, #28]
 8002a16:	6a3a      	ldr	r2, [r7, #32]
 8002a18:	e841 2300 	strex	r3, r2, [r1]
 8002a1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1e5      	bne.n	80029f0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2220      	movs	r2, #32
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e00f      	b.n	8002a60 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	bf0c      	ite	eq
 8002a50:	2301      	moveq	r3, #1
 8002a52:	2300      	movne	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	461a      	mov	r2, r3
 8002a58:	79fb      	ldrb	r3, [r7, #7]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d09f      	beq.n	800299e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3740      	adds	r7, #64	; 0x40
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b095      	sub	sp, #84	; 0x54
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	330c      	adds	r3, #12
 8002a76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a7a:	e853 3f00 	ldrex	r3, [r3]
 8002a7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	330c      	adds	r3, #12
 8002a8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a90:	643a      	str	r2, [r7, #64]	; 0x40
 8002a92:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002a96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a98:	e841 2300 	strex	r3, r2, [r1]
 8002a9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1e5      	bne.n	8002a70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	3314      	adds	r3, #20
 8002aaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aac:	6a3b      	ldr	r3, [r7, #32]
 8002aae:	e853 3f00 	ldrex	r3, [r3]
 8002ab2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f023 0301 	bic.w	r3, r3, #1
 8002aba:	64bb      	str	r3, [r7, #72]	; 0x48
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	3314      	adds	r3, #20
 8002ac2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ac4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ac6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002aca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002acc:	e841 2300 	strex	r3, r2, [r1]
 8002ad0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1e5      	bne.n	8002aa4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d119      	bne.n	8002b14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	330c      	adds	r3, #12
 8002ae6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	e853 3f00 	ldrex	r3, [r3]
 8002aee:	60bb      	str	r3, [r7, #8]
   return(result);
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f023 0310 	bic.w	r3, r3, #16
 8002af6:	647b      	str	r3, [r7, #68]	; 0x44
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	330c      	adds	r3, #12
 8002afe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b00:	61ba      	str	r2, [r7, #24]
 8002b02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b04:	6979      	ldr	r1, [r7, #20]
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	e841 2300 	strex	r3, r2, [r1]
 8002b0c:	613b      	str	r3, [r7, #16]
   return(result);
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1e5      	bne.n	8002ae0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2220      	movs	r2, #32
 8002b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b22:	bf00      	nop
 8002b24:	3754      	adds	r7, #84	; 0x54
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b084      	sub	sp, #16
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f7ff ff09 	bl	8002960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b4e:	bf00      	nop
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b085      	sub	sp, #20
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b21      	cmp	r3, #33	; 0x21
 8002b68:	d13e      	bne.n	8002be8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b72:	d114      	bne.n	8002b9e <UART_Transmit_IT+0x48>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d110      	bne.n	8002b9e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	881b      	ldrh	r3, [r3, #0]
 8002b86:	461a      	mov	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b90:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	1c9a      	adds	r2, r3, #2
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	621a      	str	r2, [r3, #32]
 8002b9c:	e008      	b.n	8002bb0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	1c59      	adds	r1, r3, #1
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6211      	str	r1, [r2, #32]
 8002ba8:	781a      	ldrb	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10f      	bne.n	8002be4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bd2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002be2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002be4:	2300      	movs	r3, #0
 8002be6:	e000      	b.n	8002bea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002be8:	2302      	movs	r3, #2
  }
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b082      	sub	sp, #8
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c0c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2220      	movs	r2, #32
 8002c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7ff fe8e 	bl	8002938 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b08c      	sub	sp, #48	; 0x30
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b22      	cmp	r3, #34	; 0x22
 8002c38:	f040 80ab 	bne.w	8002d92 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c44:	d117      	bne.n	8002c76 <UART_Receive_IT+0x50>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d113      	bne.n	8002c76 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c56:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c68:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6e:	1c9a      	adds	r2, r3, #2
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	629a      	str	r2, [r3, #40]	; 0x28
 8002c74:	e026      	b.n	8002cc4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c88:	d007      	beq.n	8002c9a <UART_Receive_IT+0x74>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10a      	bne.n	8002ca8 <UART_Receive_IT+0x82>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d106      	bne.n	8002ca8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca4:	701a      	strb	r2, [r3, #0]
 8002ca6:	e008      	b.n	8002cba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbe:	1c5a      	adds	r2, r3, #1
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d15a      	bne.n	8002d8e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0220 	bic.w	r2, r2, #32
 8002ce6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cf6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	695a      	ldr	r2, [r3, #20]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0201 	bic.w	r2, r2, #1
 8002d06:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d135      	bne.n	8002d84 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	330c      	adds	r3, #12
 8002d24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	e853 3f00 	ldrex	r3, [r3]
 8002d2c:	613b      	str	r3, [r7, #16]
   return(result);
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	f023 0310 	bic.w	r3, r3, #16
 8002d34:	627b      	str	r3, [r7, #36]	; 0x24
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	330c      	adds	r3, #12
 8002d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d3e:	623a      	str	r2, [r7, #32]
 8002d40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d42:	69f9      	ldr	r1, [r7, #28]
 8002d44:	6a3a      	ldr	r2, [r7, #32]
 8002d46:	e841 2300 	strex	r3, r2, [r1]
 8002d4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1e5      	bne.n	8002d1e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0310 	and.w	r3, r3, #16
 8002d5c:	2b10      	cmp	r3, #16
 8002d5e:	d10a      	bne.n	8002d76 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d60:	2300      	movs	r3, #0
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f7ff fdf9 	bl	8002974 <HAL_UARTEx_RxEventCallback>
 8002d82:	e002      	b.n	8002d8a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7ff fde1 	bl	800294c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	e002      	b.n	8002d94 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	e000      	b.n	8002d94 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002d92:	2302      	movs	r3, #2
  }
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3730      	adds	r7, #48	; 0x30
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002da0:	b09f      	sub	sp, #124	; 0x7c
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002db2:	68d9      	ldr	r1, [r3, #12]
 8002db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	ea40 0301 	orr.w	r3, r0, r1
 8002dbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002de0:	f021 010c 	bic.w	r1, r1, #12
 8002de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dea:	430b      	orrs	r3, r1
 8002dec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dfa:	6999      	ldr	r1, [r3, #24]
 8002dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	ea40 0301 	orr.w	r3, r0, r1
 8002e04:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	4bc5      	ldr	r3, [pc, #788]	; (8003120 <UART_SetConfig+0x384>)
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d004      	beq.n	8002e1a <UART_SetConfig+0x7e>
 8002e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	4bc3      	ldr	r3, [pc, #780]	; (8003124 <UART_SetConfig+0x388>)
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d103      	bne.n	8002e22 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e1a:	f7fe fd19 	bl	8001850 <HAL_RCC_GetPCLK2Freq>
 8002e1e:	6778      	str	r0, [r7, #116]	; 0x74
 8002e20:	e002      	b.n	8002e28 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e22:	f7fe fd01 	bl	8001828 <HAL_RCC_GetPCLK1Freq>
 8002e26:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e30:	f040 80b6 	bne.w	8002fa0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e36:	461c      	mov	r4, r3
 8002e38:	f04f 0500 	mov.w	r5, #0
 8002e3c:	4622      	mov	r2, r4
 8002e3e:	462b      	mov	r3, r5
 8002e40:	1891      	adds	r1, r2, r2
 8002e42:	6439      	str	r1, [r7, #64]	; 0x40
 8002e44:	415b      	adcs	r3, r3
 8002e46:	647b      	str	r3, [r7, #68]	; 0x44
 8002e48:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e4c:	1912      	adds	r2, r2, r4
 8002e4e:	eb45 0303 	adc.w	r3, r5, r3
 8002e52:	f04f 0000 	mov.w	r0, #0
 8002e56:	f04f 0100 	mov.w	r1, #0
 8002e5a:	00d9      	lsls	r1, r3, #3
 8002e5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e60:	00d0      	lsls	r0, r2, #3
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	1911      	adds	r1, r2, r4
 8002e68:	6639      	str	r1, [r7, #96]	; 0x60
 8002e6a:	416b      	adcs	r3, r5
 8002e6c:	667b      	str	r3, [r7, #100]	; 0x64
 8002e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	461a      	mov	r2, r3
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	1891      	adds	r1, r2, r2
 8002e7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e7c:	415b      	adcs	r3, r3
 8002e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e84:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002e88:	f7fd fbd8 	bl	800063c <__aeabi_uldivmod>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4ba5      	ldr	r3, [pc, #660]	; (8003128 <UART_SetConfig+0x38c>)
 8002e92:	fba3 2302 	umull	r2, r3, r3, r2
 8002e96:	095b      	lsrs	r3, r3, #5
 8002e98:	011e      	lsls	r6, r3, #4
 8002e9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e9c:	461c      	mov	r4, r3
 8002e9e:	f04f 0500 	mov.w	r5, #0
 8002ea2:	4622      	mov	r2, r4
 8002ea4:	462b      	mov	r3, r5
 8002ea6:	1891      	adds	r1, r2, r2
 8002ea8:	6339      	str	r1, [r7, #48]	; 0x30
 8002eaa:	415b      	adcs	r3, r3
 8002eac:	637b      	str	r3, [r7, #52]	; 0x34
 8002eae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002eb2:	1912      	adds	r2, r2, r4
 8002eb4:	eb45 0303 	adc.w	r3, r5, r3
 8002eb8:	f04f 0000 	mov.w	r0, #0
 8002ebc:	f04f 0100 	mov.w	r1, #0
 8002ec0:	00d9      	lsls	r1, r3, #3
 8002ec2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ec6:	00d0      	lsls	r0, r2, #3
 8002ec8:	4602      	mov	r2, r0
 8002eca:	460b      	mov	r3, r1
 8002ecc:	1911      	adds	r1, r2, r4
 8002ece:	65b9      	str	r1, [r7, #88]	; 0x58
 8002ed0:	416b      	adcs	r3, r5
 8002ed2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	461a      	mov	r2, r3
 8002eda:	f04f 0300 	mov.w	r3, #0
 8002ede:	1891      	adds	r1, r2, r2
 8002ee0:	62b9      	str	r1, [r7, #40]	; 0x28
 8002ee2:	415b      	adcs	r3, r3
 8002ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ee6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002eea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002eee:	f7fd fba5 	bl	800063c <__aeabi_uldivmod>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4b8c      	ldr	r3, [pc, #560]	; (8003128 <UART_SetConfig+0x38c>)
 8002ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8002efc:	095b      	lsrs	r3, r3, #5
 8002efe:	2164      	movs	r1, #100	; 0x64
 8002f00:	fb01 f303 	mul.w	r3, r1, r3
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	3332      	adds	r3, #50	; 0x32
 8002f0a:	4a87      	ldr	r2, [pc, #540]	; (8003128 <UART_SetConfig+0x38c>)
 8002f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f10:	095b      	lsrs	r3, r3, #5
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f18:	441e      	add	r6, r3
 8002f1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f04f 0100 	mov.w	r1, #0
 8002f22:	4602      	mov	r2, r0
 8002f24:	460b      	mov	r3, r1
 8002f26:	1894      	adds	r4, r2, r2
 8002f28:	623c      	str	r4, [r7, #32]
 8002f2a:	415b      	adcs	r3, r3
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f32:	1812      	adds	r2, r2, r0
 8002f34:	eb41 0303 	adc.w	r3, r1, r3
 8002f38:	f04f 0400 	mov.w	r4, #0
 8002f3c:	f04f 0500 	mov.w	r5, #0
 8002f40:	00dd      	lsls	r5, r3, #3
 8002f42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f46:	00d4      	lsls	r4, r2, #3
 8002f48:	4622      	mov	r2, r4
 8002f4a:	462b      	mov	r3, r5
 8002f4c:	1814      	adds	r4, r2, r0
 8002f4e:	653c      	str	r4, [r7, #80]	; 0x50
 8002f50:	414b      	adcs	r3, r1
 8002f52:	657b      	str	r3, [r7, #84]	; 0x54
 8002f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	f04f 0300 	mov.w	r3, #0
 8002f5e:	1891      	adds	r1, r2, r2
 8002f60:	61b9      	str	r1, [r7, #24]
 8002f62:	415b      	adcs	r3, r3
 8002f64:	61fb      	str	r3, [r7, #28]
 8002f66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f6a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002f6e:	f7fd fb65 	bl	800063c <__aeabi_uldivmod>
 8002f72:	4602      	mov	r2, r0
 8002f74:	460b      	mov	r3, r1
 8002f76:	4b6c      	ldr	r3, [pc, #432]	; (8003128 <UART_SetConfig+0x38c>)
 8002f78:	fba3 1302 	umull	r1, r3, r3, r2
 8002f7c:	095b      	lsrs	r3, r3, #5
 8002f7e:	2164      	movs	r1, #100	; 0x64
 8002f80:	fb01 f303 	mul.w	r3, r1, r3
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	3332      	adds	r3, #50	; 0x32
 8002f8a:	4a67      	ldr	r2, [pc, #412]	; (8003128 <UART_SetConfig+0x38c>)
 8002f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f90:	095b      	lsrs	r3, r3, #5
 8002f92:	f003 0207 	and.w	r2, r3, #7
 8002f96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4432      	add	r2, r6
 8002f9c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f9e:	e0b9      	b.n	8003114 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fa2:	461c      	mov	r4, r3
 8002fa4:	f04f 0500 	mov.w	r5, #0
 8002fa8:	4622      	mov	r2, r4
 8002faa:	462b      	mov	r3, r5
 8002fac:	1891      	adds	r1, r2, r2
 8002fae:	6139      	str	r1, [r7, #16]
 8002fb0:	415b      	adcs	r3, r3
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002fb8:	1912      	adds	r2, r2, r4
 8002fba:	eb45 0303 	adc.w	r3, r5, r3
 8002fbe:	f04f 0000 	mov.w	r0, #0
 8002fc2:	f04f 0100 	mov.w	r1, #0
 8002fc6:	00d9      	lsls	r1, r3, #3
 8002fc8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fcc:	00d0      	lsls	r0, r2, #3
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	eb12 0804 	adds.w	r8, r2, r4
 8002fd6:	eb43 0905 	adc.w	r9, r3, r5
 8002fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f04f 0100 	mov.w	r1, #0
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	008b      	lsls	r3, r1, #2
 8002fee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ff2:	0082      	lsls	r2, r0, #2
 8002ff4:	4640      	mov	r0, r8
 8002ff6:	4649      	mov	r1, r9
 8002ff8:	f7fd fb20 	bl	800063c <__aeabi_uldivmod>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4b49      	ldr	r3, [pc, #292]	; (8003128 <UART_SetConfig+0x38c>)
 8003002:	fba3 2302 	umull	r2, r3, r3, r2
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	011e      	lsls	r6, r3, #4
 800300a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800300c:	4618      	mov	r0, r3
 800300e:	f04f 0100 	mov.w	r1, #0
 8003012:	4602      	mov	r2, r0
 8003014:	460b      	mov	r3, r1
 8003016:	1894      	adds	r4, r2, r2
 8003018:	60bc      	str	r4, [r7, #8]
 800301a:	415b      	adcs	r3, r3
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003022:	1812      	adds	r2, r2, r0
 8003024:	eb41 0303 	adc.w	r3, r1, r3
 8003028:	f04f 0400 	mov.w	r4, #0
 800302c:	f04f 0500 	mov.w	r5, #0
 8003030:	00dd      	lsls	r5, r3, #3
 8003032:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003036:	00d4      	lsls	r4, r2, #3
 8003038:	4622      	mov	r2, r4
 800303a:	462b      	mov	r3, r5
 800303c:	1814      	adds	r4, r2, r0
 800303e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003040:	414b      	adcs	r3, r1
 8003042:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	4618      	mov	r0, r3
 800304a:	f04f 0100 	mov.w	r1, #0
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	f04f 0300 	mov.w	r3, #0
 8003056:	008b      	lsls	r3, r1, #2
 8003058:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800305c:	0082      	lsls	r2, r0, #2
 800305e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003062:	f7fd faeb 	bl	800063c <__aeabi_uldivmod>
 8003066:	4602      	mov	r2, r0
 8003068:	460b      	mov	r3, r1
 800306a:	4b2f      	ldr	r3, [pc, #188]	; (8003128 <UART_SetConfig+0x38c>)
 800306c:	fba3 1302 	umull	r1, r3, r3, r2
 8003070:	095b      	lsrs	r3, r3, #5
 8003072:	2164      	movs	r1, #100	; 0x64
 8003074:	fb01 f303 	mul.w	r3, r1, r3
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	011b      	lsls	r3, r3, #4
 800307c:	3332      	adds	r3, #50	; 0x32
 800307e:	4a2a      	ldr	r2, [pc, #168]	; (8003128 <UART_SetConfig+0x38c>)
 8003080:	fba2 2303 	umull	r2, r3, r2, r3
 8003084:	095b      	lsrs	r3, r3, #5
 8003086:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800308a:	441e      	add	r6, r3
 800308c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800308e:	4618      	mov	r0, r3
 8003090:	f04f 0100 	mov.w	r1, #0
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	1894      	adds	r4, r2, r2
 800309a:	603c      	str	r4, [r7, #0]
 800309c:	415b      	adcs	r3, r3
 800309e:	607b      	str	r3, [r7, #4]
 80030a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030a4:	1812      	adds	r2, r2, r0
 80030a6:	eb41 0303 	adc.w	r3, r1, r3
 80030aa:	f04f 0400 	mov.w	r4, #0
 80030ae:	f04f 0500 	mov.w	r5, #0
 80030b2:	00dd      	lsls	r5, r3, #3
 80030b4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80030b8:	00d4      	lsls	r4, r2, #3
 80030ba:	4622      	mov	r2, r4
 80030bc:	462b      	mov	r3, r5
 80030be:	eb12 0a00 	adds.w	sl, r2, r0
 80030c2:	eb43 0b01 	adc.w	fp, r3, r1
 80030c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f04f 0100 	mov.w	r1, #0
 80030d0:	f04f 0200 	mov.w	r2, #0
 80030d4:	f04f 0300 	mov.w	r3, #0
 80030d8:	008b      	lsls	r3, r1, #2
 80030da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80030de:	0082      	lsls	r2, r0, #2
 80030e0:	4650      	mov	r0, sl
 80030e2:	4659      	mov	r1, fp
 80030e4:	f7fd faaa 	bl	800063c <__aeabi_uldivmod>
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	4b0e      	ldr	r3, [pc, #56]	; (8003128 <UART_SetConfig+0x38c>)
 80030ee:	fba3 1302 	umull	r1, r3, r3, r2
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	2164      	movs	r1, #100	; 0x64
 80030f6:	fb01 f303 	mul.w	r3, r1, r3
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	3332      	adds	r3, #50	; 0x32
 8003100:	4a09      	ldr	r2, [pc, #36]	; (8003128 <UART_SetConfig+0x38c>)
 8003102:	fba2 2303 	umull	r2, r3, r2, r3
 8003106:	095b      	lsrs	r3, r3, #5
 8003108:	f003 020f 	and.w	r2, r3, #15
 800310c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4432      	add	r2, r6
 8003112:	609a      	str	r2, [r3, #8]
}
 8003114:	bf00      	nop
 8003116:	377c      	adds	r7, #124	; 0x7c
 8003118:	46bd      	mov	sp, r7
 800311a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800311e:	bf00      	nop
 8003120:	40011000 	.word	0x40011000
 8003124:	40011400 	.word	0x40011400
 8003128:	51eb851f 	.word	0x51eb851f

0800312c <_init>:
 800312c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312e:	bf00      	nop
 8003130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003132:	bc08      	pop	{r3}
 8003134:	469e      	mov	lr, r3
 8003136:	4770      	bx	lr

08003138 <_fini>:
 8003138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800313a:	bf00      	nop
 800313c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800313e:	bc08      	pop	{r3}
 8003140:	469e      	mov	lr, r3
 8003142:	4770      	bx	lr
